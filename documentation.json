{
    "pipes": [],
    "interfaces": [
        {
            "name": "ForgotPasswordRequest",
            "id": "interface-ForgotPasswordRequest-dd70c671f4bfe88694b6e025a5c4b5421e43c6eabd789036abe8011754a9ad3a2151c5fb567f71591f88849a665b54a4355aca8b40906327c7091e451254d537",
            "file": "src/app/services/AuthenticationService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\ninterface SigninRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupRequest {\r\n  given_name: string;\r\n  family_name: string;\r\n  email: string;\r\n  password: string;\r\n  retype_password: string;\r\n}\r\n\r\ninterface ForgotPasswordRequest {\r\n  email: string;\r\n}\r\n\r\ninterface ResendVerifyLinkRequest {\r\n  email: string;\r\n}\r\n\r\ninterface SigninResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ForgotPasswordResponse {\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ResendVerifyLinkResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  private BASE_URL_PRODUCTION = \"https://api.ioak.io:8010/api\";\r\n  private BASE_URL_LOCAL = \"http://api.ioak.io:8010/api\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  signin(environment: 'local' | 'production', realm: number | string, payloadRequest: SigninRequest): Observable<SigninResponse> {\r\n    const payload: SigninRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSigninForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\"\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/user/auth/signin`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSigninResponse(error))\r\n      ) as Observable<SigninResponse>;\r\n  }\r\n\r\n  signup(environment: 'local' | 'production', realm: number | string, payloadRequest: SignupRequest): Observable<SigninResponse> {\r\n    const payload: SignupRequest = {\r\n      given_name: payloadRequest.given_name?.trim(),\r\n      family_name: payloadRequest.family_name?.trim(),\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password,\r\n      retype_password: payloadRequest.retype_password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSignupForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/admin/auth/signup`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSignupResponse(error))\r\n      )as Observable<SigninResponse>;\r\n  }\r\n\r\n  ForgotPasswordForm(environment: 'local' | 'production', realm: number | string, payloadRequest: ForgotPasswordRequest ): Observable<ForgotPasswordResponse> {\r\n    const payload: ForgotPasswordRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateForgotPasswordForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ForgotPasswordResponse>(`${url}/${realm}/user/auth/reset-password-link`, payload)\r\n      .pipe(\r\n        catchError(error => this.processForgotPasswordResponse(error))\r\n      )as Observable<ForgotPasswordResponse>;\r\n  }\r\n\r\n  resendVerifyLink(environment: 'local' | 'production', realm: number | string, payloadRequest: ResendVerifyLinkRequest): Observable<ResendVerifyLinkResponse> {\r\n    const payload: ResendVerifyLinkRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateResendVerifyLinkForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ResendVerifyLinkResponse>(`${url}/${realm}/user/auth/verify-email/resend`, payload)\r\n      .pipe(\r\n        catchError(error => this.processResendVerifyLinkResponse(error))\r\n      )as Observable<ResendVerifyLinkResponse>;\r\n  }\r\n\r\n  private validateSigninForm(payload: SigninRequest): any {\r\n    if (!payload.email || !payload.password) {\r\n      return { error: 'Email and password are required.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateSignupForm(payload: SignupRequest): any {\r\n    if (!payload.given_name) {\r\n      return { error: 'Given name is required.' };\r\n    }\r\n    if (!payload.family_name) {\r\n      return { error: 'Family name is required.' };\r\n    }\r\n  \r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    if (!payload.password) {\r\n      return { error: 'Password is required.' };\r\n    }\r\n\r\n    if (!payload.retype_password) {\r\n      return { error: 'Please retype your password.' };\r\n    }\r\n    if (payload.password !== payload.retype_password) {\r\n      return { error: 'Passwords do not match.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateForgotPasswordForm(payload: ForgotPasswordRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateResendVerifyLinkForm(payload: ResendVerifyLinkRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private processSigninResponse(error: any): Observable<SigninResponse> {\r\n    if (error.status === 401) {\r\n      return throwError({ error: 'Invalid email or password.' });\r\n    } else {\r\n    return throwError({ error: 'An unexpected error occurred. Please try again later.' });\r\n    }\r\n  }\r\n\r\n  private processSignupResponse(error: any): any {\r\n    if (error.status === 400 && error.error && error.error.message) {\r\n      return { error: error.error.message };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processForgotPasswordResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User does not exist.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid Email request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processResendVerifyLinkResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User not found. Please check your email address.' };\r\n    } else if (error.status === 403) {\r\n      return { error: 'Access forbidden. Please try again later.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ForgotPasswordResponse",
            "id": "interface-ForgotPasswordResponse-dd70c671f4bfe88694b6e025a5c4b5421e43c6eabd789036abe8011754a9ad3a2151c5fb567f71591f88849a665b54a4355aca8b40906327c7091e451254d537",
            "file": "src/app/services/AuthenticationService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\ninterface SigninRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupRequest {\r\n  given_name: string;\r\n  family_name: string;\r\n  email: string;\r\n  password: string;\r\n  retype_password: string;\r\n}\r\n\r\ninterface ForgotPasswordRequest {\r\n  email: string;\r\n}\r\n\r\ninterface ResendVerifyLinkRequest {\r\n  email: string;\r\n}\r\n\r\ninterface SigninResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ForgotPasswordResponse {\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ResendVerifyLinkResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  private BASE_URL_PRODUCTION = \"https://api.ioak.io:8010/api\";\r\n  private BASE_URL_LOCAL = \"http://api.ioak.io:8010/api\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  signin(environment: 'local' | 'production', realm: number | string, payloadRequest: SigninRequest): Observable<SigninResponse> {\r\n    const payload: SigninRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSigninForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\"\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/user/auth/signin`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSigninResponse(error))\r\n      ) as Observable<SigninResponse>;\r\n  }\r\n\r\n  signup(environment: 'local' | 'production', realm: number | string, payloadRequest: SignupRequest): Observable<SigninResponse> {\r\n    const payload: SignupRequest = {\r\n      given_name: payloadRequest.given_name?.trim(),\r\n      family_name: payloadRequest.family_name?.trim(),\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password,\r\n      retype_password: payloadRequest.retype_password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSignupForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/admin/auth/signup`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSignupResponse(error))\r\n      )as Observable<SigninResponse>;\r\n  }\r\n\r\n  ForgotPasswordForm(environment: 'local' | 'production', realm: number | string, payloadRequest: ForgotPasswordRequest ): Observable<ForgotPasswordResponse> {\r\n    const payload: ForgotPasswordRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateForgotPasswordForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ForgotPasswordResponse>(`${url}/${realm}/user/auth/reset-password-link`, payload)\r\n      .pipe(\r\n        catchError(error => this.processForgotPasswordResponse(error))\r\n      )as Observable<ForgotPasswordResponse>;\r\n  }\r\n\r\n  resendVerifyLink(environment: 'local' | 'production', realm: number | string, payloadRequest: ResendVerifyLinkRequest): Observable<ResendVerifyLinkResponse> {\r\n    const payload: ResendVerifyLinkRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateResendVerifyLinkForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ResendVerifyLinkResponse>(`${url}/${realm}/user/auth/verify-email/resend`, payload)\r\n      .pipe(\r\n        catchError(error => this.processResendVerifyLinkResponse(error))\r\n      )as Observable<ResendVerifyLinkResponse>;\r\n  }\r\n\r\n  private validateSigninForm(payload: SigninRequest): any {\r\n    if (!payload.email || !payload.password) {\r\n      return { error: 'Email and password are required.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateSignupForm(payload: SignupRequest): any {\r\n    if (!payload.given_name) {\r\n      return { error: 'Given name is required.' };\r\n    }\r\n    if (!payload.family_name) {\r\n      return { error: 'Family name is required.' };\r\n    }\r\n  \r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    if (!payload.password) {\r\n      return { error: 'Password is required.' };\r\n    }\r\n\r\n    if (!payload.retype_password) {\r\n      return { error: 'Please retype your password.' };\r\n    }\r\n    if (payload.password !== payload.retype_password) {\r\n      return { error: 'Passwords do not match.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateForgotPasswordForm(payload: ForgotPasswordRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateResendVerifyLinkForm(payload: ResendVerifyLinkRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private processSigninResponse(error: any): Observable<SigninResponse> {\r\n    if (error.status === 401) {\r\n      return throwError({ error: 'Invalid email or password.' });\r\n    } else {\r\n    return throwError({ error: 'An unexpected error occurred. Please try again later.' });\r\n    }\r\n  }\r\n\r\n  private processSignupResponse(error: any): any {\r\n    if (error.status === 400 && error.error && error.error.message) {\r\n      return { error: error.error.message };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processForgotPasswordResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User does not exist.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid Email request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processResendVerifyLinkResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User not found. Please check your email address.' };\r\n    } else if (error.status === 403) {\r\n      return { error: 'Access forbidden. Please try again later.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "errorCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ResendVerifyLinkRequest",
            "id": "interface-ResendVerifyLinkRequest-dd70c671f4bfe88694b6e025a5c4b5421e43c6eabd789036abe8011754a9ad3a2151c5fb567f71591f88849a665b54a4355aca8b40906327c7091e451254d537",
            "file": "src/app/services/AuthenticationService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\ninterface SigninRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupRequest {\r\n  given_name: string;\r\n  family_name: string;\r\n  email: string;\r\n  password: string;\r\n  retype_password: string;\r\n}\r\n\r\ninterface ForgotPasswordRequest {\r\n  email: string;\r\n}\r\n\r\ninterface ResendVerifyLinkRequest {\r\n  email: string;\r\n}\r\n\r\ninterface SigninResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ForgotPasswordResponse {\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ResendVerifyLinkResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  private BASE_URL_PRODUCTION = \"https://api.ioak.io:8010/api\";\r\n  private BASE_URL_LOCAL = \"http://api.ioak.io:8010/api\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  signin(environment: 'local' | 'production', realm: number | string, payloadRequest: SigninRequest): Observable<SigninResponse> {\r\n    const payload: SigninRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSigninForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\"\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/user/auth/signin`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSigninResponse(error))\r\n      ) as Observable<SigninResponse>;\r\n  }\r\n\r\n  signup(environment: 'local' | 'production', realm: number | string, payloadRequest: SignupRequest): Observable<SigninResponse> {\r\n    const payload: SignupRequest = {\r\n      given_name: payloadRequest.given_name?.trim(),\r\n      family_name: payloadRequest.family_name?.trim(),\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password,\r\n      retype_password: payloadRequest.retype_password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSignupForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/admin/auth/signup`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSignupResponse(error))\r\n      )as Observable<SigninResponse>;\r\n  }\r\n\r\n  ForgotPasswordForm(environment: 'local' | 'production', realm: number | string, payloadRequest: ForgotPasswordRequest ): Observable<ForgotPasswordResponse> {\r\n    const payload: ForgotPasswordRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateForgotPasswordForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ForgotPasswordResponse>(`${url}/${realm}/user/auth/reset-password-link`, payload)\r\n      .pipe(\r\n        catchError(error => this.processForgotPasswordResponse(error))\r\n      )as Observable<ForgotPasswordResponse>;\r\n  }\r\n\r\n  resendVerifyLink(environment: 'local' | 'production', realm: number | string, payloadRequest: ResendVerifyLinkRequest): Observable<ResendVerifyLinkResponse> {\r\n    const payload: ResendVerifyLinkRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateResendVerifyLinkForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ResendVerifyLinkResponse>(`${url}/${realm}/user/auth/verify-email/resend`, payload)\r\n      .pipe(\r\n        catchError(error => this.processResendVerifyLinkResponse(error))\r\n      )as Observable<ResendVerifyLinkResponse>;\r\n  }\r\n\r\n  private validateSigninForm(payload: SigninRequest): any {\r\n    if (!payload.email || !payload.password) {\r\n      return { error: 'Email and password are required.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateSignupForm(payload: SignupRequest): any {\r\n    if (!payload.given_name) {\r\n      return { error: 'Given name is required.' };\r\n    }\r\n    if (!payload.family_name) {\r\n      return { error: 'Family name is required.' };\r\n    }\r\n  \r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    if (!payload.password) {\r\n      return { error: 'Password is required.' };\r\n    }\r\n\r\n    if (!payload.retype_password) {\r\n      return { error: 'Please retype your password.' };\r\n    }\r\n    if (payload.password !== payload.retype_password) {\r\n      return { error: 'Passwords do not match.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateForgotPasswordForm(payload: ForgotPasswordRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateResendVerifyLinkForm(payload: ResendVerifyLinkRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private processSigninResponse(error: any): Observable<SigninResponse> {\r\n    if (error.status === 401) {\r\n      return throwError({ error: 'Invalid email or password.' });\r\n    } else {\r\n    return throwError({ error: 'An unexpected error occurred. Please try again later.' });\r\n    }\r\n  }\r\n\r\n  private processSignupResponse(error: any): any {\r\n    if (error.status === 400 && error.error && error.error.message) {\r\n      return { error: error.error.message };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processForgotPasswordResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User does not exist.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid Email request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processResendVerifyLinkResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User not found. Please check your email address.' };\r\n    } else if (error.status === 403) {\r\n      return { error: 'Access forbidden. Please try again later.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ResendVerifyLinkResponse",
            "id": "interface-ResendVerifyLinkResponse-dd70c671f4bfe88694b6e025a5c4b5421e43c6eabd789036abe8011754a9ad3a2151c5fb567f71591f88849a665b54a4355aca8b40906327c7091e451254d537",
            "file": "src/app/services/AuthenticationService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\ninterface SigninRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupRequest {\r\n  given_name: string;\r\n  family_name: string;\r\n  email: string;\r\n  password: string;\r\n  retype_password: string;\r\n}\r\n\r\ninterface ForgotPasswordRequest {\r\n  email: string;\r\n}\r\n\r\ninterface ResendVerifyLinkRequest {\r\n  email: string;\r\n}\r\n\r\ninterface SigninResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ForgotPasswordResponse {\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ResendVerifyLinkResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  private BASE_URL_PRODUCTION = \"https://api.ioak.io:8010/api\";\r\n  private BASE_URL_LOCAL = \"http://api.ioak.io:8010/api\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  signin(environment: 'local' | 'production', realm: number | string, payloadRequest: SigninRequest): Observable<SigninResponse> {\r\n    const payload: SigninRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSigninForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\"\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/user/auth/signin`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSigninResponse(error))\r\n      ) as Observable<SigninResponse>;\r\n  }\r\n\r\n  signup(environment: 'local' | 'production', realm: number | string, payloadRequest: SignupRequest): Observable<SigninResponse> {\r\n    const payload: SignupRequest = {\r\n      given_name: payloadRequest.given_name?.trim(),\r\n      family_name: payloadRequest.family_name?.trim(),\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password,\r\n      retype_password: payloadRequest.retype_password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSignupForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/admin/auth/signup`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSignupResponse(error))\r\n      )as Observable<SigninResponse>;\r\n  }\r\n\r\n  ForgotPasswordForm(environment: 'local' | 'production', realm: number | string, payloadRequest: ForgotPasswordRequest ): Observable<ForgotPasswordResponse> {\r\n    const payload: ForgotPasswordRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateForgotPasswordForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ForgotPasswordResponse>(`${url}/${realm}/user/auth/reset-password-link`, payload)\r\n      .pipe(\r\n        catchError(error => this.processForgotPasswordResponse(error))\r\n      )as Observable<ForgotPasswordResponse>;\r\n  }\r\n\r\n  resendVerifyLink(environment: 'local' | 'production', realm: number | string, payloadRequest: ResendVerifyLinkRequest): Observable<ResendVerifyLinkResponse> {\r\n    const payload: ResendVerifyLinkRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateResendVerifyLinkForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ResendVerifyLinkResponse>(`${url}/${realm}/user/auth/verify-email/resend`, payload)\r\n      .pipe(\r\n        catchError(error => this.processResendVerifyLinkResponse(error))\r\n      )as Observable<ResendVerifyLinkResponse>;\r\n  }\r\n\r\n  private validateSigninForm(payload: SigninRequest): any {\r\n    if (!payload.email || !payload.password) {\r\n      return { error: 'Email and password are required.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateSignupForm(payload: SignupRequest): any {\r\n    if (!payload.given_name) {\r\n      return { error: 'Given name is required.' };\r\n    }\r\n    if (!payload.family_name) {\r\n      return { error: 'Family name is required.' };\r\n    }\r\n  \r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    if (!payload.password) {\r\n      return { error: 'Password is required.' };\r\n    }\r\n\r\n    if (!payload.retype_password) {\r\n      return { error: 'Please retype your password.' };\r\n    }\r\n    if (payload.password !== payload.retype_password) {\r\n      return { error: 'Passwords do not match.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateForgotPasswordForm(payload: ForgotPasswordRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateResendVerifyLinkForm(payload: ResendVerifyLinkRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private processSigninResponse(error: any): Observable<SigninResponse> {\r\n    if (error.status === 401) {\r\n      return throwError({ error: 'Invalid email or password.' });\r\n    } else {\r\n    return throwError({ error: 'An unexpected error occurred. Please try again later.' });\r\n    }\r\n  }\r\n\r\n  private processSignupResponse(error: any): any {\r\n    if (error.status === 400 && error.error && error.error.message) {\r\n      return { error: error.error.message };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processForgotPasswordResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User does not exist.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid Email request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processResendVerifyLinkResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User not found. Please check your email address.' };\r\n    } else if (error.status === 403) {\r\n      return { error: 'Access forbidden. Please try again later.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "errorCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "outcome",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SigninRequest",
            "id": "interface-SigninRequest-dd70c671f4bfe88694b6e025a5c4b5421e43c6eabd789036abe8011754a9ad3a2151c5fb567f71591f88849a665b54a4355aca8b40906327c7091e451254d537",
            "file": "src/app/services/AuthenticationService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\ninterface SigninRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupRequest {\r\n  given_name: string;\r\n  family_name: string;\r\n  email: string;\r\n  password: string;\r\n  retype_password: string;\r\n}\r\n\r\ninterface ForgotPasswordRequest {\r\n  email: string;\r\n}\r\n\r\ninterface ResendVerifyLinkRequest {\r\n  email: string;\r\n}\r\n\r\ninterface SigninResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ForgotPasswordResponse {\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ResendVerifyLinkResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  private BASE_URL_PRODUCTION = \"https://api.ioak.io:8010/api\";\r\n  private BASE_URL_LOCAL = \"http://api.ioak.io:8010/api\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  signin(environment: 'local' | 'production', realm: number | string, payloadRequest: SigninRequest): Observable<SigninResponse> {\r\n    const payload: SigninRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSigninForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\"\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/user/auth/signin`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSigninResponse(error))\r\n      ) as Observable<SigninResponse>;\r\n  }\r\n\r\n  signup(environment: 'local' | 'production', realm: number | string, payloadRequest: SignupRequest): Observable<SigninResponse> {\r\n    const payload: SignupRequest = {\r\n      given_name: payloadRequest.given_name?.trim(),\r\n      family_name: payloadRequest.family_name?.trim(),\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password,\r\n      retype_password: payloadRequest.retype_password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSignupForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/admin/auth/signup`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSignupResponse(error))\r\n      )as Observable<SigninResponse>;\r\n  }\r\n\r\n  ForgotPasswordForm(environment: 'local' | 'production', realm: number | string, payloadRequest: ForgotPasswordRequest ): Observable<ForgotPasswordResponse> {\r\n    const payload: ForgotPasswordRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateForgotPasswordForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ForgotPasswordResponse>(`${url}/${realm}/user/auth/reset-password-link`, payload)\r\n      .pipe(\r\n        catchError(error => this.processForgotPasswordResponse(error))\r\n      )as Observable<ForgotPasswordResponse>;\r\n  }\r\n\r\n  resendVerifyLink(environment: 'local' | 'production', realm: number | string, payloadRequest: ResendVerifyLinkRequest): Observable<ResendVerifyLinkResponse> {\r\n    const payload: ResendVerifyLinkRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateResendVerifyLinkForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ResendVerifyLinkResponse>(`${url}/${realm}/user/auth/verify-email/resend`, payload)\r\n      .pipe(\r\n        catchError(error => this.processResendVerifyLinkResponse(error))\r\n      )as Observable<ResendVerifyLinkResponse>;\r\n  }\r\n\r\n  private validateSigninForm(payload: SigninRequest): any {\r\n    if (!payload.email || !payload.password) {\r\n      return { error: 'Email and password are required.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateSignupForm(payload: SignupRequest): any {\r\n    if (!payload.given_name) {\r\n      return { error: 'Given name is required.' };\r\n    }\r\n    if (!payload.family_name) {\r\n      return { error: 'Family name is required.' };\r\n    }\r\n  \r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    if (!payload.password) {\r\n      return { error: 'Password is required.' };\r\n    }\r\n\r\n    if (!payload.retype_password) {\r\n      return { error: 'Please retype your password.' };\r\n    }\r\n    if (payload.password !== payload.retype_password) {\r\n      return { error: 'Passwords do not match.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateForgotPasswordForm(payload: ForgotPasswordRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateResendVerifyLinkForm(payload: ResendVerifyLinkRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private processSigninResponse(error: any): Observable<SigninResponse> {\r\n    if (error.status === 401) {\r\n      return throwError({ error: 'Invalid email or password.' });\r\n    } else {\r\n    return throwError({ error: 'An unexpected error occurred. Please try again later.' });\r\n    }\r\n  }\r\n\r\n  private processSignupResponse(error: any): any {\r\n    if (error.status === 400 && error.error && error.error.message) {\r\n      return { error: error.error.message };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processForgotPasswordResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User does not exist.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid Email request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processResendVerifyLinkResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User not found. Please check your email address.' };\r\n    } else if (error.status === 403) {\r\n      return { error: 'Access forbidden. Please try again later.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SigninResponse",
            "id": "interface-SigninResponse-dd70c671f4bfe88694b6e025a5c4b5421e43c6eabd789036abe8011754a9ad3a2151c5fb567f71591f88849a665b54a4355aca8b40906327c7091e451254d537",
            "file": "src/app/services/AuthenticationService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\ninterface SigninRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupRequest {\r\n  given_name: string;\r\n  family_name: string;\r\n  email: string;\r\n  password: string;\r\n  retype_password: string;\r\n}\r\n\r\ninterface ForgotPasswordRequest {\r\n  email: string;\r\n}\r\n\r\ninterface ResendVerifyLinkRequest {\r\n  email: string;\r\n}\r\n\r\ninterface SigninResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ForgotPasswordResponse {\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ResendVerifyLinkResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  private BASE_URL_PRODUCTION = \"https://api.ioak.io:8010/api\";\r\n  private BASE_URL_LOCAL = \"http://api.ioak.io:8010/api\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  signin(environment: 'local' | 'production', realm: number | string, payloadRequest: SigninRequest): Observable<SigninResponse> {\r\n    const payload: SigninRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSigninForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\"\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/user/auth/signin`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSigninResponse(error))\r\n      ) as Observable<SigninResponse>;\r\n  }\r\n\r\n  signup(environment: 'local' | 'production', realm: number | string, payloadRequest: SignupRequest): Observable<SigninResponse> {\r\n    const payload: SignupRequest = {\r\n      given_name: payloadRequest.given_name?.trim(),\r\n      family_name: payloadRequest.family_name?.trim(),\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password,\r\n      retype_password: payloadRequest.retype_password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSignupForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/admin/auth/signup`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSignupResponse(error))\r\n      )as Observable<SigninResponse>;\r\n  }\r\n\r\n  ForgotPasswordForm(environment: 'local' | 'production', realm: number | string, payloadRequest: ForgotPasswordRequest ): Observable<ForgotPasswordResponse> {\r\n    const payload: ForgotPasswordRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateForgotPasswordForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ForgotPasswordResponse>(`${url}/${realm}/user/auth/reset-password-link`, payload)\r\n      .pipe(\r\n        catchError(error => this.processForgotPasswordResponse(error))\r\n      )as Observable<ForgotPasswordResponse>;\r\n  }\r\n\r\n  resendVerifyLink(environment: 'local' | 'production', realm: number | string, payloadRequest: ResendVerifyLinkRequest): Observable<ResendVerifyLinkResponse> {\r\n    const payload: ResendVerifyLinkRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateResendVerifyLinkForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ResendVerifyLinkResponse>(`${url}/${realm}/user/auth/verify-email/resend`, payload)\r\n      .pipe(\r\n        catchError(error => this.processResendVerifyLinkResponse(error))\r\n      )as Observable<ResendVerifyLinkResponse>;\r\n  }\r\n\r\n  private validateSigninForm(payload: SigninRequest): any {\r\n    if (!payload.email || !payload.password) {\r\n      return { error: 'Email and password are required.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateSignupForm(payload: SignupRequest): any {\r\n    if (!payload.given_name) {\r\n      return { error: 'Given name is required.' };\r\n    }\r\n    if (!payload.family_name) {\r\n      return { error: 'Family name is required.' };\r\n    }\r\n  \r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    if (!payload.password) {\r\n      return { error: 'Password is required.' };\r\n    }\r\n\r\n    if (!payload.retype_password) {\r\n      return { error: 'Please retype your password.' };\r\n    }\r\n    if (payload.password !== payload.retype_password) {\r\n      return { error: 'Passwords do not match.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateForgotPasswordForm(payload: ForgotPasswordRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateResendVerifyLinkForm(payload: ResendVerifyLinkRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private processSigninResponse(error: any): Observable<SigninResponse> {\r\n    if (error.status === 401) {\r\n      return throwError({ error: 'Invalid email or password.' });\r\n    } else {\r\n    return throwError({ error: 'An unexpected error occurred. Please try again later.' });\r\n    }\r\n  }\r\n\r\n  private processSignupResponse(error: any): any {\r\n    if (error.status === 400 && error.error && error.error.message) {\r\n      return { error: error.error.message };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processForgotPasswordResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User does not exist.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid Email request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processResendVerifyLinkResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User not found. Please check your email address.' };\r\n    } else if (error.status === 403) {\r\n      return { error: 'Access forbidden. Please try again later.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "errorCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "outcome",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SignupRequest",
            "id": "interface-SignupRequest-dd70c671f4bfe88694b6e025a5c4b5421e43c6eabd789036abe8011754a9ad3a2151c5fb567f71591f88849a665b54a4355aca8b40906327c7091e451254d537",
            "file": "src/app/services/AuthenticationService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\ninterface SigninRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupRequest {\r\n  given_name: string;\r\n  family_name: string;\r\n  email: string;\r\n  password: string;\r\n  retype_password: string;\r\n}\r\n\r\ninterface ForgotPasswordRequest {\r\n  email: string;\r\n}\r\n\r\ninterface ResendVerifyLinkRequest {\r\n  email: string;\r\n}\r\n\r\ninterface SigninResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ForgotPasswordResponse {\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ResendVerifyLinkResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  private BASE_URL_PRODUCTION = \"https://api.ioak.io:8010/api\";\r\n  private BASE_URL_LOCAL = \"http://api.ioak.io:8010/api\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  signin(environment: 'local' | 'production', realm: number | string, payloadRequest: SigninRequest): Observable<SigninResponse> {\r\n    const payload: SigninRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSigninForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\"\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/user/auth/signin`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSigninResponse(error))\r\n      ) as Observable<SigninResponse>;\r\n  }\r\n\r\n  signup(environment: 'local' | 'production', realm: number | string, payloadRequest: SignupRequest): Observable<SigninResponse> {\r\n    const payload: SignupRequest = {\r\n      given_name: payloadRequest.given_name?.trim(),\r\n      family_name: payloadRequest.family_name?.trim(),\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password,\r\n      retype_password: payloadRequest.retype_password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSignupForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/admin/auth/signup`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSignupResponse(error))\r\n      )as Observable<SigninResponse>;\r\n  }\r\n\r\n  ForgotPasswordForm(environment: 'local' | 'production', realm: number | string, payloadRequest: ForgotPasswordRequest ): Observable<ForgotPasswordResponse> {\r\n    const payload: ForgotPasswordRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateForgotPasswordForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ForgotPasswordResponse>(`${url}/${realm}/user/auth/reset-password-link`, payload)\r\n      .pipe(\r\n        catchError(error => this.processForgotPasswordResponse(error))\r\n      )as Observable<ForgotPasswordResponse>;\r\n  }\r\n\r\n  resendVerifyLink(environment: 'local' | 'production', realm: number | string, payloadRequest: ResendVerifyLinkRequest): Observable<ResendVerifyLinkResponse> {\r\n    const payload: ResendVerifyLinkRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateResendVerifyLinkForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ResendVerifyLinkResponse>(`${url}/${realm}/user/auth/verify-email/resend`, payload)\r\n      .pipe(\r\n        catchError(error => this.processResendVerifyLinkResponse(error))\r\n      )as Observable<ResendVerifyLinkResponse>;\r\n  }\r\n\r\n  private validateSigninForm(payload: SigninRequest): any {\r\n    if (!payload.email || !payload.password) {\r\n      return { error: 'Email and password are required.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateSignupForm(payload: SignupRequest): any {\r\n    if (!payload.given_name) {\r\n      return { error: 'Given name is required.' };\r\n    }\r\n    if (!payload.family_name) {\r\n      return { error: 'Family name is required.' };\r\n    }\r\n  \r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    if (!payload.password) {\r\n      return { error: 'Password is required.' };\r\n    }\r\n\r\n    if (!payload.retype_password) {\r\n      return { error: 'Please retype your password.' };\r\n    }\r\n    if (payload.password !== payload.retype_password) {\r\n      return { error: 'Passwords do not match.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateForgotPasswordForm(payload: ForgotPasswordRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateResendVerifyLinkForm(payload: ResendVerifyLinkRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private processSigninResponse(error: any): Observable<SigninResponse> {\r\n    if (error.status === 401) {\r\n      return throwError({ error: 'Invalid email or password.' });\r\n    } else {\r\n    return throwError({ error: 'An unexpected error occurred. Please try again later.' });\r\n    }\r\n  }\r\n\r\n  private processSignupResponse(error: any): any {\r\n    if (error.status === 400 && error.error && error.error.message) {\r\n      return { error: error.error.message };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processForgotPasswordResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User does not exist.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid Email request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processResendVerifyLinkResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User not found. Please check your email address.' };\r\n    } else if (error.status === 403) {\r\n      return { error: 'Access forbidden. Please try again later.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "family_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "given_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "retype_password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-23c11020a2831beb3fa02ee911a75b64009c31bb46f73a01145c2560cb13b7f7e641105b678bd8fb01a5a199117001f3da4a78351d29d85d213ed7b82982091f",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-dd70c671f4bfe88694b6e025a5c4b5421e43c6eabd789036abe8011754a9ad3a2151c5fb567f71591f88849a665b54a4355aca8b40906327c7091e451254d537",
            "file": "src/app/services/AuthenticationService.ts",
            "properties": [
                {
                    "name": "BASE_URL_LOCAL",
                    "defaultValue": "\"http://api.ioak.io:8010/api\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "BASE_URL_PRODUCTION",
                    "defaultValue": "\"https://api.ioak.io:8010/api\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ForgotPasswordForm",
                    "args": [
                        {
                            "name": "environment",
                            "type": "\"local\" | \"production\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "realm",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payloadRequest",
                            "type": "ForgotPasswordRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ForgotPasswordResponse>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "\"local\" | \"production\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "realm",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payloadRequest",
                            "type": "ForgotPasswordRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processForgotPasswordResponse",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processResendVerifyLinkResponse",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processSigninResponse",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SigninResponse>",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processSignupResponse",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resendVerifyLink",
                    "args": [
                        {
                            "name": "environment",
                            "type": "\"local\" | \"production\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "realm",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payloadRequest",
                            "type": "ResendVerifyLinkRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ResendVerifyLinkResponse>",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "\"local\" | \"production\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "realm",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payloadRequest",
                            "type": "ResendVerifyLinkRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signin",
                    "args": [
                        {
                            "name": "environment",
                            "type": "\"local\" | \"production\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "realm",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payloadRequest",
                            "type": "SigninRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SigninResponse>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "\"local\" | \"production\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "realm",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payloadRequest",
                            "type": "SigninRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signup",
                    "args": [
                        {
                            "name": "environment",
                            "type": "\"local\" | \"production\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "realm",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payloadRequest",
                            "type": "SignupRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SigninResponse>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "\"local\" | \"production\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "realm",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payloadRequest",
                            "type": "SignupRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateForgotPasswordForm",
                    "args": [
                        {
                            "name": "payload",
                            "type": "ForgotPasswordRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "ForgotPasswordRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateResendVerifyLinkForm",
                    "args": [
                        {
                            "name": "payload",
                            "type": "ResendVerifyLinkRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "ResendVerifyLinkRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateSigninForm",
                    "args": [
                        {
                            "name": "payload",
                            "type": "SigninRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "SigninRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateSignupForm",
                    "args": [
                        {
                            "name": "payload",
                            "type": "SignupRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "SignupRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\ninterface SigninRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignupRequest {\r\n  given_name: string;\r\n  family_name: string;\r\n  email: string;\r\n  password: string;\r\n  retype_password: string;\r\n}\r\n\r\ninterface ForgotPasswordRequest {\r\n  email: string;\r\n}\r\n\r\ninterface ResendVerifyLinkRequest {\r\n  email: string;\r\n}\r\n\r\ninterface SigninResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ForgotPasswordResponse {\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\ninterface ResendVerifyLinkResponse {\r\n  outcome: string;\r\n  success: boolean;\r\n  errorCode?: string;\r\n  errorMessages: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  private BASE_URL_PRODUCTION = \"https://api.ioak.io:8010/api\";\r\n  private BASE_URL_LOCAL = \"http://api.ioak.io:8010/api\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  signin(environment: 'local' | 'production', realm: number | string, payloadRequest: SigninRequest): Observable<SigninResponse> {\r\n    const payload: SigninRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSigninForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\"\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/user/auth/signin`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSigninResponse(error))\r\n      ) as Observable<SigninResponse>;\r\n  }\r\n\r\n  signup(environment: 'local' | 'production', realm: number | string, payloadRequest: SignupRequest): Observable<SigninResponse> {\r\n    const payload: SignupRequest = {\r\n      given_name: payloadRequest.given_name?.trim(),\r\n      family_name: payloadRequest.family_name?.trim(),\r\n      email: payloadRequest.email?.trim(),\r\n      password: payloadRequest.password,\r\n      retype_password: payloadRequest.retype_password\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateSignupForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n    });\r\n\r\n    return this.http.post<SigninResponse>(`${url}/${realm}/admin/auth/signup`, { response_type: \"token\", ...payload }, { headers })\r\n      .pipe(\r\n        catchError(error => this.processSignupResponse(error))\r\n      )as Observable<SigninResponse>;\r\n  }\r\n\r\n  ForgotPasswordForm(environment: 'local' | 'production', realm: number | string, payloadRequest: ForgotPasswordRequest ): Observable<ForgotPasswordResponse> {\r\n    const payload: ForgotPasswordRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateForgotPasswordForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ForgotPasswordResponse>(`${url}/${realm}/user/auth/reset-password-link`, payload)\r\n      .pipe(\r\n        catchError(error => this.processForgotPasswordResponse(error))\r\n      )as Observable<ForgotPasswordResponse>;\r\n  }\r\n\r\n  resendVerifyLink(environment: 'local' | 'production', realm: number | string, payloadRequest: ResendVerifyLinkRequest): Observable<ResendVerifyLinkResponse> {\r\n    const payload: ResendVerifyLinkRequest = {\r\n      email: payloadRequest.email?.trim(),\r\n    };\r\n\r\n    const url = environment === 'local' ? this.BASE_URL_LOCAL : this.BASE_URL_PRODUCTION;\r\n\r\n    const validationError = this.validateResendVerifyLinkForm(payload);\r\n    if (validationError) {\r\n      return throwError(validationError);\r\n    }\r\n\r\n    return this.http.post<ResendVerifyLinkResponse>(`${url}/${realm}/user/auth/verify-email/resend`, payload)\r\n      .pipe(\r\n        catchError(error => this.processResendVerifyLinkResponse(error))\r\n      )as Observable<ResendVerifyLinkResponse>;\r\n  }\r\n\r\n  private validateSigninForm(payload: SigninRequest): any {\r\n    if (!payload.email || !payload.password) {\r\n      return { error: 'Email and password are required.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateSignupForm(payload: SignupRequest): any {\r\n    if (!payload.given_name) {\r\n      return { error: 'Given name is required.' };\r\n    }\r\n    if (!payload.family_name) {\r\n      return { error: 'Family name is required.' };\r\n    }\r\n  \r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    if (!payload.password) {\r\n      return { error: 'Password is required.' };\r\n    }\r\n\r\n    if (!payload.retype_password) {\r\n      return { error: 'Please retype your password.' };\r\n    }\r\n    if (payload.password !== payload.retype_password) {\r\n      return { error: 'Passwords do not match.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateForgotPasswordForm(payload: ForgotPasswordRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validateResendVerifyLinkForm(payload: ResendVerifyLinkRequest): any {\r\n    if (!payload.email) {\r\n      return { error: 'Email address is required.' };\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(payload.email)) {\r\n      return { error: 'Invalid email address.' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private processSigninResponse(error: any): Observable<SigninResponse> {\r\n    if (error.status === 401) {\r\n      return throwError({ error: 'Invalid email or password.' });\r\n    } else {\r\n    return throwError({ error: 'An unexpected error occurred. Please try again later.' });\r\n    }\r\n  }\r\n\r\n  private processSignupResponse(error: any): any {\r\n    if (error.status === 400 && error.error && error.error.message) {\r\n      return { error: error.error.message };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processForgotPasswordResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User does not exist.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid Email request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n\r\n  private processResendVerifyLinkResponse(error: any): any {\r\n    if (error.status === 404) {\r\n      return { error: 'User not found. Please check your email address.' };\r\n    } else if (error.status === 403) {\r\n      return { error: 'Access forbidden. Please try again later.' };\r\n    } else if (error.status === 400) {\r\n      return { error: 'Invalid request. Please try again later.' };\r\n    } else {\r\n      return { error: 'An unexpected error occurred. Please try again later.' };\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-6f7a9e3a1bdde59864ebc39b91862d04f893d27b5768defeb6368500aedd124e511bfad4c2abdaa3208adf857b51befa3ccb2b7c854d710e935854d60e8f2369",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'authlite-form-widgets-angular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterLink, RouterOutlet } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    standalone: true,\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.css'],\r\n    imports: [CommonModule, RouterOutlet, RouterLink]\r\n})\r\nexport class AppComponent {\r\n  title = 'authlite-form-widgets-angular';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->\r\n<!-- * * * * * * * to get started with your project! * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n\r\n<!--<style>\r\n  :host {\r\n    --bright-blue: oklch(51.01% 0.274 263.83);\r\n    --electric-violet: oklch(53.18% 0.28 296.97);\r\n    --french-violet: oklch(47.66% 0.246 305.88);\r\n    --vivid-pink: oklch(69.02% 0.277 332.77);\r\n    --hot-red: oklch(61.42% 0.238 15.34);\r\n    --orange-red: oklch(63.32% 0.24 31.68);\r\n\r\n    --gray-900: oklch(19.37% 0.006 300.98);\r\n    --gray-700: oklch(36.98% 0.014 302.71);\r\n    --gray-400: oklch(70.9% 0.015 304.04);\r\n\r\n    --red-to-pink-to-purple-vertical-gradient: linear-gradient(\r\n      180deg,\r\n      var(--orange-red) 0%,\r\n      var(--vivid-pink) 50%,\r\n      var(--electric-violet) 100%\r\n    );\r\n\r\n    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(\r\n      90deg,\r\n      var(--orange-red) 0%,\r\n      var(--vivid-pink) 50%,\r\n      var(--electric-violet) 100%\r\n    );\r\n\r\n    --pill-accent: var(--bright-blue);\r\n\r\n    font-family: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\r\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\r\n      \"Segoe UI Symbol\";\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 3.125rem;\r\n    color: var(--gray-900);\r\n    font-weight: 500;\r\n    line-height: 100%;\r\n    letter-spacing: -0.125rem;\r\n    margin: 0;\r\n    font-family: \"Inter Tight\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\r\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\r\n      \"Segoe UI Symbol\";\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n    color: var(--gray-700);\r\n  }\r\n\r\n  main {\r\n    width: 100%;\r\n    min-height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 1rem;\r\n    box-sizing: inherit;\r\n    position: relative;\r\n  }\r\n\r\n  .angular-logo {\r\n    max-width: 9.2rem;\r\n  }\r\n\r\n  .content {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    max-width: 700px;\r\n    margin-bottom: 3rem;\r\n  }\r\n\r\n  .content h1 {\r\n    margin-top: 1.75rem;\r\n  }\r\n\r\n  .content p {\r\n    margin-top: 1.5rem;\r\n  }\r\n\r\n  .divider {\r\n    width: 1px;\r\n    background: var(--red-to-pink-to-purple-vertical-gradient);\r\n    margin-inline: 0.5rem;\r\n  }\r\n\r\n  .pill-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: start;\r\n    flex-wrap: wrap;\r\n    gap: 1.25rem;\r\n  }\r\n\r\n  .pill {\r\n    display: flex;\r\n    align-items: center;\r\n    --pill-accent: var(--bright-blue);\r\n    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);\r\n    color: var(--pill-accent);\r\n    padding-inline: 0.75rem;\r\n    padding-block: 0.375rem;\r\n    border-radius: 2.75rem;\r\n    border: 0;\r\n    transition: background 0.3s ease;\r\n    font-family: var(--inter-font);\r\n    font-size: 0.875rem;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    line-height: 1.4rem;\r\n    letter-spacing: -0.00875rem;\r\n    text-decoration: none;\r\n  }\r\n\r\n  .pill:hover {\r\n    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);\r\n  }\r\n\r\n  .pill-group .pill:nth-child(6n + 1) {\r\n    --pill-accent: var(--bright-blue);\r\n  }\r\n  .pill-group .pill:nth-child(6n + 2) {\r\n    --pill-accent: var(--french-violet);\r\n  }\r\n  .pill-group .pill:nth-child(6n + 3),\r\n  .pill-group .pill:nth-child(6n + 4),\r\n  .pill-group .pill:nth-child(6n + 5) {\r\n    --pill-accent: var(--hot-red);\r\n  }\r\n\r\n  .pill-group svg {\r\n    margin-inline-start: 0.25rem;\r\n  }\r\n\r\n  .social-links {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.73rem;\r\n    margin-top: 1.5rem;\r\n  }\r\n\r\n  .social-links path {\r\n    transition: fill 0.3s ease;\r\n    fill: var(--gray-400);\r\n  }\r\n\r\n  .social-links a:hover svg path {\r\n    fill: var(--gray-900);\r\n  }\r\n\r\n  @media screen and (max-width: 650px) {\r\n    .content {\r\n      flex-direction: column;\r\n      width: max-content;\r\n    }\r\n\r\n    .divider {\r\n      height: 1px;\r\n      width: 100%;\r\n      background: var(--red-to-pink-to-purple-horizontal-gradient);\r\n      margin-block: 1.5rem;\r\n    }\r\n  }\r\n</style>\r\n\r\n<main class=\"main\">\r\n  <div class=\"content\">\r\n    <div class=\"left-side\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 982 239\"\r\n        fill=\"none\"\r\n        class=\"angular-logo\"\r\n      >\r\n        <g clip-path=\"url(#a)\">\r\n          <path\r\n            fill=\"url(#b)\"\r\n            d=\"M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z\"\r\n          />\r\n          <path\r\n            fill=\"url(#c)\"\r\n            d=\"M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z\"\r\n          />\r\n        </g>\r\n        <defs>\r\n          <radialGradient\r\n            id=\"c\"\r\n            cx=\"0\"\r\n            cy=\"0\"\r\n            r=\"1\"\r\n            gradientTransform=\"rotate(118.122 171.182 60.81) scale(205.794)\"\r\n            gradientUnits=\"userSpaceOnUse\"\r\n          >\r\n            <stop stop-color=\"#FF41F8\" />\r\n            <stop offset=\".707\" stop-color=\"#FF41F8\" stop-opacity=\".5\" />\r\n            <stop offset=\"1\" stop-color=\"#FF41F8\" stop-opacity=\"0\" />\r\n          </radialGradient>\r\n          <linearGradient\r\n            id=\"b\"\r\n            x1=\"0\"\r\n            x2=\"982\"\r\n            y1=\"192\"\r\n            y2=\"192\"\r\n            gradientUnits=\"userSpaceOnUse\"\r\n          >\r\n            <stop stop-color=\"#F0060B\" />\r\n            <stop offset=\"0\" stop-color=\"#F0070C\" />\r\n            <stop offset=\".526\" stop-color=\"#CC26D5\" />\r\n            <stop offset=\"1\" stop-color=\"#7702FF\" />\r\n          </linearGradient>\r\n          <clipPath id=\"a\"><path fill=\"#fff\" d=\"M0 0h982v239H0z\" /></clipPath>\r\n        </defs>\r\n      </svg>\r\n      <h1>Hello, {{ title }}</h1>\r\n      <p>Congratulations! Your app is running. 🎉</p>\r\n    </div>\r\n    <div class=\"divider\" role=\"separator\" aria-label=\"Divider\"></div>\r\n    <div class=\"right-side\">\r\n      <div class=\"pill-group\">\r\n        @for (item of [\r\n          { title: 'Explore the Docs', link: 'https://angular.dev' },\r\n          { title: 'Learn with Tutorials', link: 'https://angular.dev/tutorials' },\r\n          { title: 'CLI Docs', link: 'https://angular.dev/tools/cli' },\r\n          { title: 'Angular Language Service', link: 'https://angular.dev/tools/language-service' },\r\n          { title: 'Angular DevTools', link: 'https://angular.dev/tools/devtools' },\r\n        ]; track item.title) {\r\n          <a\r\n            class=\"pill\"\r\n            [href]=\"item.link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener\"\r\n          >\r\n            <span>{{ item.title }}</span>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              height=\"14\"\r\n              viewBox=\"0 -960 960 960\"\r\n              width=\"14\"\r\n              fill=\"currentColor\"\r\n            >\r\n              <path\r\n                d=\"M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h560v-280h80v280q0 33-23.5 56.5T760-120H200Zm188-212-56-56 372-372H560v-80h280v280h-80v-144L388-332Z\"\r\n              />\r\n            </svg>\r\n          </a>\r\n        }\r\n      </div>\r\n      <div class=\"social-links\">\r\n        <a\r\n          href=\"https://github.com/angular/angular\"\r\n          aria-label=\"Github\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n        >\r\n          <svg\r\n            width=\"25\"\r\n            height=\"24\"\r\n            viewBox=\"0 0 25 24\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            alt=\"Github\"\r\n          >\r\n            <path\r\n              d=\"M12.3047 0C5.50634 0 0 5.50942 0 12.3047C0 17.7423 3.52529 22.3535 8.41332 23.9787C9.02856 24.0946 9.25414 23.7142 9.25414 23.3871C9.25414 23.0949 9.24389 22.3207 9.23876 21.2953C5.81601 22.0377 5.09414 19.6444 5.09414 19.6444C4.53427 18.2243 3.72524 17.8449 3.72524 17.8449C2.61064 17.082 3.81137 17.0973 3.81137 17.0973C5.04697 17.1835 5.69604 18.3647 5.69604 18.3647C6.79321 20.2463 8.57636 19.7029 9.27978 19.3881C9.39052 18.5924 9.70736 18.0499 10.0591 17.7423C7.32641 17.4347 4.45429 16.3765 4.45429 11.6618C4.45429 10.3185 4.9311 9.22133 5.72065 8.36C5.58222 8.04931 5.16694 6.79833 5.82831 5.10337C5.82831 5.10337 6.85883 4.77319 9.2121 6.36459C10.1965 6.09082 11.2424 5.95546 12.2883 5.94931C13.3342 5.95546 14.3801 6.09082 15.3644 6.36459C17.7023 4.77319 18.7328 5.10337 18.7328 5.10337C19.3942 6.79833 18.9789 8.04931 18.8559 8.36C19.6403 9.22133 20.1171 10.3185 20.1171 11.6618C20.1171 16.3888 17.2409 17.4296 14.5031 17.7321C14.9338 18.1012 15.3337 18.8559 15.3337 20.0084C15.3337 21.6552 15.3183 22.978 15.3183 23.3779C15.3183 23.7009 15.5336 24.0854 16.1642 23.9623C21.0871 22.3484 24.6094 17.7341 24.6094 12.3047C24.6094 5.50942 19.0999 0 12.3047 0Z\"\r\n            />\r\n          </svg>\r\n        </a>\r\n        <a\r\n          href=\"https://twitter.com/angular\"\r\n          aria-label=\"Twitter\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n        >\r\n          <svg\r\n            width=\"24\"\r\n            height=\"24\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            alt=\"Twitter\"\r\n          >\r\n            <path\r\n              d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\"\r\n            />\r\n          </svg>\r\n        </a>\r\n        <a\r\n          href=\"https://www.youtube.com/channel/UCbn1OgGei-DV7aSRo_HaAiw\"\r\n          aria-label=\"Youtube\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n        >\r\n          <svg\r\n            width=\"29\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 29 20\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            alt=\"Youtube\"\r\n          >\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              clip-rule=\"evenodd\"\r\n              d=\"M27.4896 1.52422C27.9301 1.96749 28.2463 2.51866 28.4068 3.12258C29.0004 5.35161 29.0004 10 29.0004 10C29.0004 10 29.0004 14.6484 28.4068 16.8774C28.2463 17.4813 27.9301 18.0325 27.4896 18.4758C27.0492 18.9191 26.5 19.2389 25.8972 19.4032C23.6778 20 14.8068 20 14.8068 20C14.8068 20 5.93586 20 3.71651 19.4032C3.11363 19.2389 2.56449 18.9191 2.12405 18.4758C1.68361 18.0325 1.36732 17.4813 1.20683 16.8774C0.613281 14.6484 0.613281 10 0.613281 10C0.613281 10 0.613281 5.35161 1.20683 3.12258C1.36732 2.51866 1.68361 1.96749 2.12405 1.52422C2.56449 1.08095 3.11363 0.76113 3.71651 0.596774C5.93586 0 14.8068 0 14.8068 0C14.8068 0 23.6778 0 25.8972 0.596774C26.5 0.76113 27.0492 1.08095 27.4896 1.52422ZM19.3229 10L11.9036 5.77905V14.221L19.3229 10Z\"\r\n            />\r\n          </svg>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</main>-->\r\n\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<lib-login></lib-login>\r\n<!-- <lib-authlite-forms-widgets></lib-authlite-forms-widgets> -->\r\n<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c3bd323da00016e22e16a3a7d43440094eeceddea5e6076a399bcaba62f8e742efe65e543735e36f9ea1bed026ab8e3c8fb60482667ae55ec324f8adfe79b9f7",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 837,
                            "end": 851,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 838,
                                "end": 846,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-0734994da7cea08705107df814ddcabe581c4da0e3070e62e0a9816bbd330deb405ed5afda0dba5f73c16ebab22ec2f51b57917928fd930af90a8b621de1e42b",
            "file": "src/app/ui/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "theme",
                    "defaultValue": "ThemeType.default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "ThemeType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport ThemeType from '../../types/ThemeType';\r\n\r\n@Component({\r\n  selector: 'app-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n})\r\nexport class CheckboxComponent {\r\n  @Input() theme: ThemeType = ThemeType.default;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/index.css';\r\n\r\n* {\r\n    --authlite-checkbox-height: 20px;\r\n    --authlite-checkbox-label-offset: 6px;\r\n    --authlite-checkbox-font-size: var(--authlite-formelement-font-size);\r\n    --authlite-checkbox-font-weight: var(--authlite-formelement-font-weight);\r\n    --authlite-checkbox-border-radius: 2px;\r\n    --authlite-checkbox-border-thickness: 1px;\r\n    --authlite-checkbox-background-color: none;\r\n\r\n    /* Checkmark */\r\n    --authlite-checkbox-checkmark-width: 6px;\r\n    --authlite-checkbox-checkmark-height: 12px;\r\n    --authlite-checkbox-checkmark-offset-left: 6.2px;\r\n    --authlite-checkbox-checkmark-offset-bottom: -1px;\r\n}\r\n\r\n* {\r\n    --authlite-checkbox-background-color: none;\r\n}\r\n\r\n.authlite-checkbox--theme-default,\r\n.authlite-radio--theme-default {\r\n    --authlite-checkbox-border-color: var(--theme-white-extended-500);\r\n    --authlite-checkbox-checkmark-color: var(--theme-black-500);\r\n    --authlite-checkbox-background-color-hover: var(--theme-default-transparent-100);\r\n    --authlite-checkbox-border-color-hover: var(--theme-white-extended-500);\r\n    --authlite-checkbox-background-color-checked: transparent;\r\n    --authlite-checkbox-border-color-checked: var(--theme-white-extended-500);\r\n}\r\n\r\n.authlite-checkbox {\r\n    cursor: pointer;\r\n    position: relative;\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n}\r\n\r\n.authlite-checkbox__input {\r\n    margin: 0;\r\n    padding: 0;\r\n    appearance: none;\r\n    width: var(--authlite-checkbox-height);\r\n    height: var(--authlite-checkbox-height);\r\n    border: var(--authlite-checkbox-border-thickness) solid var(--authlite-checkbox-border-color);\r\n    background-color: var(--authlite-checkbox-background-color);\r\n    outline: 0;\r\n    cursor: pointer;\r\n    border-radius: var(--authlite-checkbox-border-radius);\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    /* position: static; */\r\n    transition: 250ms border-color ease-in-out, 250ms background-color ease-in-out, 250ms color ease-in-out;\r\n}\r\n\r\n.authlite-checkbox__input:checked {\r\n    background-color: var(--authlite-checkbox-background-color-checked);\r\n    border-color: var(--authlite-checkbox-border-color-checked);\r\n}\r\n\r\n.authlite-checkbox__input:hover,\r\n.authlite-checkbox__input:focus,\r\n.authlite-checkbox__input:checked:hover,\r\n.authlite-checkbox__input:checked:focus {\r\n    background-color: var(--authlite-checkbox-background-color-hover);\r\n    border-color: var(--authlite-checkbox-border-color-hover);\r\n}\r\n\r\n.authlite-checkbox__input:checked:after {\r\n    content: \"\";\r\n    display: block;\r\n    position: relative;\r\n    width: var(--authlite-checkbox-checkmark-width);\r\n    height: var(--authlite-checkbox-checkmark-height);\r\n    border-bottom: 1px solid var(--authlite-checkbox-checkmark-color);\r\n    border-right: 1px solid var(--authlite-checkbox-checkmark-color);\r\n    left: var(--authlite-checkbox-checkmark-offset-left);\r\n    bottom: var(--authlite-checkbox-checkmark-offset-bottom);\r\n    transform: rotate(40deg);\r\n}\r\n\r\n.authlite-checkbox__span {\r\n    //font-size: var(--authlite-checkbox-font-size);\r\n    font-size: 14px;\r\n    font-weight: var(--authlite-checkbox-font-weight);\r\n    margin-left: var(--authlite-checkbox-label-offset);\r\n}",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "\r\n  <label class=\"authlite-checkbox\" [class.authlite-checkbox--theme-default]=\"theme === 'default'\">\r\n    <input class=\"authlite-checkbox__input\" type=\"checkbox\"/>\r\n    <span class=\"authlite-checkbox__span\">Remember me</span>\r\n  </label>"
        },
        {
            "name": "DesignOneComponent",
            "id": "component-DesignOneComponent-f868b7399d38845a618a5e5466aa9bf2df3b24934a8436d706d851f4fb8e6ca371a3332f019ed04eb0c2099921d0b233eca43f76fa18a3b84c8c34963509b7d6",
            "file": "src/app/login/DesignOne/design-one.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-design-one",
            "styleUrls": [
                "./design-one.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./design-one.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "changeView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "clearErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "forgotPasswordFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "ForgotPasswordFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onForgotPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onResendVerifyLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onSignin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onSignup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "resendVerifyLinkFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ResendVerifyLinkFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "signinFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "SigninFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "signupFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "SignupFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "translationDictionary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "TranslationDictionary",
                    "decorators": []
                },
                {
                    "name": "view",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "PageView",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { TranslationDictionary } from '../../types/TranslationDictionaryType';\r\nimport PageView from '../../types/PageViewType';\r\nimport SigninFormErrorMessages from '../../types/SigninFormErrorMessagesType';\r\nimport SignupFormErrorMessages from '../../types/SignupFormErrorMessagesType';\r\nimport ForgotPasswordFormErrorMessages from '../../types/ForgotPasswordFormErrorMessagesType';\r\nimport ResendVerifyLinkFormErrorMessages from '../../types/ResendVerifyLinkFormErrorMessagesType';\r\n\r\n@Component({\r\n  selector: 'app-design-one',\r\n  templateUrl: './design-one.component.html',\r\n  styleUrls: ['./design-one.component.scss'],\r\n})\r\nexport class DesignOneComponent{\r\n  @Input() logo: any;\r\n  @Input() placeholder: any;\r\n  @Input() onSignin: any;\r\n  @Input() onSignup: any;\r\n  @Input() onForgotPassword: any;\r\n  @Input() onResendVerifyLink: any;\r\n  @Input() signinFormErrorMessages!: SigninFormErrorMessages;\r\n  @Input() signupFormErrorMessages!: SignupFormErrorMessages;\r\n  @Input() forgotPasswordFormErrorMessages!: ForgotPasswordFormErrorMessages;\r\n  @Input() resendVerifyLinkFormErrorMessages!: ResendVerifyLinkFormErrorMessages;\r\n  @Input() clearErrorMessages: any;\r\n  @Input() translationDictionary!: TranslationDictionary;\r\n  @Input() view!: PageView;\r\n  @Input() changeView: any;\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(): void {\r\n    if (this.signinFormErrorMessages.unverifiedEmail) {\r\n      this.changeView(PageView.resendverifyemail);\r\n    }\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".authlite-d1 {\r\n    display: grid;\r\n    grid-template-columns: 0 1fr;\r\n    min-height: 100vh;\r\n    height: 100%;\r\n    background-color: #fcfcfc;\r\n    color: #0c0c0c;\r\n}\r\n\r\n@media (min-width: 960px) {\r\n    .authlite-d1 {\r\n        grid-template-columns: auto 1fr;\r\n    }\r\n\r\n    .authlite-d1__left {\r\n        width: 450px;\r\n    }\r\n}\r\n\r\n.authlite-d1__left {\r\n    background: url(\"https://images.unsplash.com/photo-1547357812-b5afb3656fc1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\") center center / cover no-repeat;\r\n}\r\n\r\n.authlite-d1__right {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    height: 100%;\r\n    width: 100%;\r\n    max-width: 456px;\r\n    padding: 20px;\r\n    margin: auto;\r\n    /* row-gap: 20px; */\r\n}\r\n",
                    "styleUrl": "./design-one.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class='authlite-d1'>\r\n  <div class=\"authlite-d1__left\"></div>\r\n  <div class=\"authlite-d1__right\">\r\n    <app-main-form\r\n      [onSignin]=\"onSignin\"\r\n      [onSignup]=\"onSignup\"\r\n      [signinFormErrorMessages]=\"signinFormErrorMessages\"\r\n      [signupFormErrorMessages]=\"signupFormErrorMessages\"\r\n      [forgotPasswordFormErrorMessages]=\"forgotPasswordFormErrorMessages\"\r\n      [resendVerifyLinkFormErrorMessages]=\"resendVerifyLinkFormErrorMessages\"\r\n      [clearErrorMessages]=\"clearErrorMessages\"\r\n      [logo]=\"logo\"\r\n      [placeholder]=\"placeholder\"\r\n      [dictionary]=\"translationDictionary\"\r\n      [view]=\"view\"\r\n      [changeView]=\"changeView\"\r\n      [onForgotPassword]=\"onForgotPassword\"\r\n      [onResendVerifyLink]=\"onResendVerifyLink\">\r\n    </app-main-form>\r\n  </div>\r\n</div>"
        },
        {
            "name": "ForgotPasswordFormComponent",
            "id": "component-ForgotPasswordFormComponent-ba618b86777f91fa6d2b7ab5b84140aeb6fe8b18958c79c65df195677a61fd2dfb7e0b1e32be9ee84771ea25183f1a7ff41b1048cb38f0928d2ccdfb74d9868a",
            "file": "src/app/ForgotPasswordForm/forgot-password-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password-form",
            "styleUrls": [
                "./forgot-password-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "translationDictionary",
                    "defaultValue": "DEFAULT_TRANSLATION_DICTIONARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "TranslationDictionary",
                    "decorators": []
                },
                {
                    "name": "translationName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "TranslationName",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onForgotPassword",
                    "defaultValue": "new EventEmitter<{ email: string }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<literal type>"
                },
                {
                    "name": "onSignin",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "authenticationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthenticationService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "forgotPasswordForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "forgotPasswordFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ForgotPasswordFormErrorMessages",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "passwordResetLinkSent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "{\r\n    email: '',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ForgotPasswordRequest",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToSignin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { TranslationDictionary, DEFAULT_TRANSLATION_DICTIONARY, TranslationName } from '../types/TranslationDictionaryType';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationService } from '../services/AuthenticationService';\r\nimport ForgotPasswordFormErrorMessages from '../types/ForgotPasswordFormErrorMessagesType';\r\nimport ForgotPasswordRequest from '../types/ResendVerifyLinkRequestType';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password-form',\r\n  templateUrl: './forgot-password-form.component.html',\r\n  styleUrls: ['./forgot-password-form.component.scss'],\r\n})\r\nexport class ForgotPasswordFormComponent{\r\n\r\n  @Input() translationDictionary: TranslationDictionary = DEFAULT_TRANSLATION_DICTIONARY;\r\n\r\n  @Input() translationName!: TranslationName;\r\n\r\n  @Output() onForgotPassword: EventEmitter<{ email: string }> = new EventEmitter<{ email: string }>();\r\n  @Output() onSignin: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  forgotPasswordFormErrorMessages!: ForgotPasswordFormErrorMessages;\r\n\r\n  forgotPasswordForm!: FormGroup;\r\n\r\n  passwordResetLinkSent: boolean = false;\r\n\r\n  email: any;\r\n\r\n  state: ForgotPasswordRequest = {\r\n    email: '',\r\n  };\r\n\r\n  constructor(private fb: FormBuilder,\r\n    public router:Router,\r\n    public authenticationService: AuthenticationService) \r\n    {\r\n    this.forgotPasswordForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]]\r\n    });\r\n   }\r\n\r\n  get formControls() {\r\n    return this.forgotPasswordForm.controls;\r\n  }\r\n\r\n  onInput(event: Event) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n    const controlName = inputElement.name;\r\n    this.forgotPasswordForm.controls[controlName].setValue(inputElement.value);\r\n  }\r\n\r\n    onSubmit(event: Event): void {\r\n      console.log('onSubmit')\r\n      event.preventDefault();\r\n      if (this.forgotPasswordForm.valid) \r\n        {\r\n        const forgotPasswordFormRequest = this.forgotPasswordForm.value;\r\n        const environment = 'production';\r\n        const realm = '228';\r\n        const email = forgotPasswordFormRequest.email;\r\n  \r\n        this.authenticationService.ForgotPasswordForm(environment, realm, forgotPasswordFormRequest).subscribe({\r\n          next: (response: any) => {\r\n            console.log(response);\r\n            this.router.navigate(['/signin-form']);\r\n          },  \r\n          error: (error: any) => {\r\n            console.error(error);\r\n          }\r\n        });\r\n      } else {\r\n        this.forgotPasswordForm.markAllAsTouched();\r\n      }\r\n    }\r\n\r\n    getTranslation(key: string): string {\r\n      return this.translationDictionary[key] || '';\r\n    }\r\n\r\n    navigateToSignin() {\r\n      this.router.navigate(['/signin-form']);\r\n    }\r\n\r\n  /*onSubmit(): void {\r\n    console.log('onSubmit')\r\n    if (this.forgotPasswordForm.invalid) {\r\n      this.forgotPasswordForm.markAllAsTouched();\r\n      return;\r\n    }\r\n    const enteredEmail = this.forgotPasswordForm.value.email;\r\n\r\n    if (!this.isUserExists(enteredEmail)) {\r\n      this.forgotPasswordForm.setErrors({ userNotFound: true });\r\n    }\r\n    else {\r\n      console.log('reset link sent to:', this.forgotPasswordForm.value);\r\n      this.sendPasswordResetLink(enteredEmail);\r\n    }\r\n  }\r\n  isUserExists(email: string): boolean {\r\n    return false;\r\n  }\r\n  sendPasswordResetLink(email: string): void {\r\n    console.log('Password reset link sent to ${enteredEmail}', email);\r\n    this.passwordResetLinkSent = true;\r\n  }*/\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/index.css';\r\n.authlite-action-bar,\r\n.authlite-action-bar-center {\r\n    font-size: 12px;\r\n}",
                    "styleUrl": "./forgot-password-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "formControls": {
                    "name": "formControls",
                    "getSignature": {
                        "name": "formControls",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            },
            "templateData": "<form class=\"authlite-d1-forgotpassword-form\" [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"onSubmit($event)\">\r\n  <div class=\"authlite-margin-top\">\r\n    <app-tagline \r\n                   [title]=\"getTranslation('FORGOT_PASSWORD_FORM__GREETING_TITLE')\" \r\n                   [subtitle]=\"getTranslation('FORGOT_PASSWORD_FORM__GREETING_SUBTITLE')\">\r\n      </app-tagline>\r\n  </div>\r\n  <div class=\"authlite-margin-top\">\r\n    <app-form-element-message [text]=\"getTranslation('FORGOT_PASSWORD_FORM__LABEL_EMAIL')\" type='label'></app-form-element-message>\r\n      <input class=\"authlite-input\" formControlName=\"email\" [(ngModel)]=\"state.email\" autocomplete='off' autofocus (input)=\"onInput($event)\"/>\r\n      <app-form-element-message \r\n            *ngIf=\"formControls['email'].touched && formControls['email'].hasError('required')\"\r\n            [text]=\"getTranslation(forgotPasswordFormErrorMessages['email'] || 'FORGOT_PASSWORD_ERROR__BLANK_USERNAME')\" type='error'>\r\n      </app-form-element-message>\r\n      <app-form-element-message \r\n            *ngIf=\"formControls['email'].hasError('email')\"\r\n            [text]=\"getTranslation(forgotPasswordFormErrorMessages['email'] || 'FORGOT_PASSWORD_ERROR__INVALID_USERNAME')\" type='error'>\r\n      </app-form-element-message>\r\n      <app-form-element-message \r\n        *ngIf=\"formControls['email'].hasError('userNotFound')\" \r\n        [text]=\"getTranslation(forgotPasswordFormErrorMessages['email'] || 'FORGOT_PASSWORD_ERROR__USER_NOT_FOUND')\" type='error'>\r\n    </app-form-element-message>\r\n  </div>\r\n  <div class=\"authlite-action-bar authlite-margin-top\">\r\n    <button class=\"authlite-primary-button\"\r\n      type=\"submit\">{{translationDictionary.FORGOT_PASSWORD_FORM__ACTION_SEND}}</button>\r\n  </div>\r\n  <div class=\"authlite-action-bar-center authlite-margin-top\">\r\n    {{translationDictionary.FORGOT_PASSWORD_FORM__MESSAGE_REMEMBER_PASSWORD}}\r\n    <button class=\"authlite-button-as-link\" type=\"button\"\r\n    (click)=\"navigateToSignin()\">{{translationDictionary.FORGOT_PASSWORD_FORM__ACTION_SIGNIN}}</button>\r\n  </div>\r\n</form>"
        },
        {
            "name": "FormElementMessageComponent",
            "id": "component-FormElementMessageComponent-ebcfebb570c3d8d7b765e8a01ccd486070195f9b8a6196442da52b7450a95175b2990f9e4d56a7f1de274659f9e13b873356d5eb686aa05c8d89c4c9c7e59d43",
            "file": "src/app/shared/FormElementMessage/form-element-message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-element-message",
            "styleUrls": [
                "./form-element-message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-element-message.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "blankFamilyname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "blankGivenname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "blankPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "blankRetypePassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "blankUsername",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "family_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "given_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "incorrectPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidUsername",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "retype_password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "RetypePasswordDoesnotmatch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "\"error\" | \"warning\" | \"success\" | \"info\" | \"label\"",
                    "decorators": []
                },
                {
                    "name": "userNotFound",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-form-element-message',\r\n  templateUrl: './form-element-message.component.html',\r\n  styleUrls: ['./form-element-message.component.scss'],\r\n})\r\nexport class FormElementMessageComponent {\r\n  @Input() email!: string;\r\n  @Input() password!: string;\r\n  @Input() given_name!: string;\r\n  @Input() family_name!: string;\r\n  @Input() retype_password!: string;\r\n  @Input() type!: 'error' | 'warning' | 'success' | 'info' | 'label';\r\n  @Input() blankUsername!: string;\r\n  @Input() blankPassword!: string;\r\n  @Input() invalidUsername!: string;\r\n  @Input() userNotFound!: string;\r\n  @Input() incorrectPassword!: string;\r\n  @Input() blankGivenname!: string;\r\n  @Input() blankFamilyname!: string;\r\n  @Input() blankRetypePassword!: string;\r\n  @Input() RetypePasswordDoesnotmatch!: string;\r\n  @Input() text: string = '';\r\n  //@Input() type: 'error' | 'warning' | 'success' | 'info' | 'label' = 'label';\r\n  constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/index.css';",
                    "styleUrl": "./form-element-message.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "extends": [],
            "templateData": "<!--<div class=\"authlite-form-element-label\" type=\"type\">\r\n    {{email}}\r\n    {{password}}\r\n    {{given_name}}\r\n    {{family_name}}\r\n    {{retype_password}}\r\n</div>\r\n<div class=\"authlite-form-element-error\">\r\n    {{blankUsername}}\r\n    {{blankPassword}}\r\n    {{invalidUsername}}\r\n    {{userNotFound}}\r\n    {{incorrectPassword}}\r\n    {{blankGivenname}}\r\n    {{blankFamilyname}}\r\n    {{blankRetypePassword}}\r\n    {{RetypePasswordDoesnotmatch}}\r\n</div>-->\r\n<div [ngClass]=\"'authlite-form-element-' + type\">\r\n    {{ text }}\r\n  </div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-07f894be6f38e12f30e1e7e5d9e999c27c78ce2f0be03c15c8c5f39207229e147892a2fd1fdb54e935c4f04f03c2162e39a22c28cdc64e027ea15824ddf0f3c9",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ButtonComponent } from './button.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent],\r\n  template: `<header>\r\n    <div class=\"storybook-header\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            [primary]=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.storybook-header svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header h1 {\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header button + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.storybook-header .welcome {\r\n  color: #333;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-302f34aa0c0c8a7fcc7a01ceb62eb40825777f6a25d9f5bfe53272b35c2b0669f7af9f4078efaaf196c8c4cb084f90895d2ab7cdd25c0e8bafb985dbbe195bcc-1",
            "file": "src/app/Header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent {\r\n  @Input() logo: any;\r\n  @Input() header!: string;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".authlite-d1-header {\r\n    display: grid;\r\n    justify-items: center;\r\n    row-gap: 10px;\r\n    /* margin-bottom: 20px; */\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"authlite-d1-header\">\r\n    <app-logo></app-logo>\r\n  </div>"
        },
        {
            "name": "InfoPageComponent",
            "id": "component-InfoPageComponent-e06497702bea43d32fef79b4194dedf025ea5f00a9226fd26047c338acbef1c2dadce992e533c841dbe59ba6b8479a0536cb0c8f27ebb1175f206173eea2c405",
            "file": "src/app/InfoPage/info-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info-page",
            "styleUrls": [
                "./info-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./info-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-info-page',\r\n  templateUrl: './info-page.component.html',\r\n  styleUrls: ['./info-page.component.scss']\r\n})\r\nexport class InfoPageComponent {\r\n  @Input() heading!: string;\r\n  @Input() children!: string;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".authlite-infopage {\r\n    display: grid;\r\n    justify-items: center;\r\n    /* row-gap: 20px; */\r\n    /* width: 340px; */\r\n    max-width: 90vw;\r\n    text-align: center;\r\n    font-size: 14px;\r\n    margin-top: 40px;\r\n}\r\n\r\n\r\n.authlite-infopage h1 {\r\n    font-weight: 500;\r\n    font-size: 24px;\r\n}",
                    "styleUrl": "./info-page.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"authlite-infopage\">\r\n    <h1>{{ heading }}</h1>\r\n    <div>\r\n      <ng-content></ng-content>\r\n      {{children}}\r\n    </div>\r\n  </div>"
        },
        {
            "name": "InfoPageDescriptionComponent",
            "id": "component-InfoPageDescriptionComponent-347d51f5175b89fdc686a5ce343217cf608aacfa29a517e9dd74e3131d72d82df6bbe788c9b1f4db9f24edf73101ab677c77607ea8e375ad4b0b4de9e24cc322",
            "file": "src/app/InfoPage/InfoPageDescription/info-page-description.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info-page-description",
            "styleUrls": [
                "./info-page-description.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./info-page-description.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-info-page-description',\r\n  templateUrl: './info-page-description.component.html',\r\n  styleUrls: ['./info-page-description.component.scss']\r\n})\r\nexport class InfoPageDescriptionComponent {\r\n    @Input() children: any;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".authlite-infopage-description {\r\n    margin-top: 12px;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n}",
                    "styleUrl": "./info-page-description.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"authlite-infopage-description\">\r\n    <ng-content></ng-content>\r\n    {{children}}\r\n</div>"
        },
        {
            "name": "InfoPageFootnoteComponent",
            "id": "component-InfoPageFootnoteComponent-cb8d644952a7dcd144124d5ab44f6d2585a513369ed59f3d9f9ec5ac055dbcdfe5669912a0f319c2349a905bef14d065182e4e2f4e57acb00345430fdf1eaf63",
            "file": "src/app/InfoPage/InfoPageFootnote/info-page.footnote.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info-page-footnote",
            "styleUrls": [
                "./info-page-footnote.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./info-page-footnote.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-info-page-footnote',\r\n  templateUrl: './info-page-footnote.component.html',\r\n  styleUrls: ['./info-page-footnote.component.scss']\r\n})\r\nexport class InfoPageFootnoteComponent {}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".authlite-infopage-footnote {\r\n    margin-top: 12px;\r\n    font-size: 12px;\r\n    font-weight: 400;\r\n    color: #6e6e80;\r\n}",
                    "styleUrl": "./info-page-footnote.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"authlite-infopage-footnote\">\r\n    <ng-content></ng-content>\r\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-aefbb8c713dba35ed984bac8f163523dcd670ae393fa17d753d8f99613009d0852eac1d3aecf33b98072cafd27f745e22ab8a637d75ebaaab03765637892333b",
            "file": "src/app/login/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "changeView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "clearErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "forgotPasswordFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "ForgotPasswordFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onForgotPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onResendVerifyLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onSignin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onSignup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "resendVerifyLinkFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "ResendVerifyLinkFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "signinFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "SigninFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "signupFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "SignupFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "translationDictionary",
                    "defaultValue": "DEFAULT_TRANSLATION_DICTIONARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "TranslationDictionary",
                    "decorators": []
                },
                {
                    "name": "view",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "PageView",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateToForgotPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToResendVerifyLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToSignin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToSignup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "processChildren",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { DEFAULT_TRANSLATION_DICTIONARY, TranslationDictionary, TranslationName, getTranslation } from '../../types/TranslationDictionaryType';\r\nimport PageView from '../../types/PageViewType';\r\nimport SigninFormErrorMessages from '../../types/SigninFormErrorMessagesType';\r\nimport SignupFormErrorMessages from '../../types/SignupFormErrorMessagesType';\r\nimport ForgotPasswordFormErrorMessages from '../../types/ForgotPasswordFormErrorMessagesType';\r\nimport ResendVerifyLinkFormErrorMessages from '../../types/ResendVerifyLinkFormErrorMessagesType';\r\nimport { AuthenticationService } from '../../services/AuthenticationService';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n  @Input() logo: any = null;\r\n  @Input() placeholder: any = null;\r\n  @Input() onSignin: any;\r\n  @Input() onSignup: any;\r\n  @Input() onForgotPassword: any;\r\n  @Input() onResendVerifyLink: any;\r\n  @Input() translationDictionary: TranslationDictionary = DEFAULT_TRANSLATION_DICTIONARY;\r\n  @Input() signinFormErrorMessages!: SigninFormErrorMessages;\r\n  @Input() signupFormErrorMessages!: SignupFormErrorMessages;\r\n  @Input() forgotPasswordFormErrorMessages!: ForgotPasswordFormErrorMessages;\r\n  @Input() resendVerifyLinkFormErrorMessages!: ResendVerifyLinkFormErrorMessages;\r\n  @Input() clearErrorMessages: any;\r\n  @Input() changeView: any;\r\n  @Input() children: any;\r\n  @Input() view!: PageView;\r\n\r\n  constructor(private authenticationService: AuthenticationService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.processChildren();\r\n  }\r\n\r\n  processChildren(): void {\r\n    if (!Array.isArray(this.children)) {\r\n      this.children = [this.children];\r\n    }\r\n\r\n    this.children.forEach((item: any) => {\r\n      if (item?.type?.displayName === 'Logo' || item?.type?.name === 'Logo') {\r\n        this.logo = item;\r\n      }\r\n      if (item?.type?.displayName === 'Placeholder' || item?.type?.name === 'Placeholder') {\r\n        this.placeholder = item;\r\n      }\r\n    });\r\n  }\r\n\r\n  navigateToSignin(): void {\r\n    this.changeView(PageView.signin);\r\n  }\r\n\r\n  navigateToSignup(): void {\r\n    this.changeView(PageView.signup);\r\n  }\r\n\r\n  navigateToForgotPassword(): void {\r\n    this.onForgotPassword();\r\n  }\r\n\r\n  navigateToResendVerifyLink(): void {\r\n    this.onResendVerifyLink();\r\n  }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/index.css';\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700&display=swap');\r\n\r\nhtml body * {\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nhtml body {\r\n    font-size: 14px;\r\n}\r\n*{\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n.authlite-d1 {\r\n    display: grid;\r\n    grid-template-columns: 0 1fr;\r\n    min-height: 100vh;\r\n    height: 100%;\r\n    background-color: #fcfcfc;\r\n    color: #0c0c0c;\r\n}\r\n\r\n@media (min-width: 960px) {\r\n    .authlite-d1 {\r\n        grid-template-columns: auto 1fr;\r\n    }\r\n\r\n    .authlite-d1__left {\r\n        width: 450px;\r\n    }\r\n}\r\n\r\n.authlite-d1__left {\r\n    background: url(\"https://images.unsplash.com/photo-1547357812-b5afb3656fc1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\") center center / cover no-repeat;\r\n}\r\n\r\n.authlite-d1__right {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    height: 100%;\r\n    width: 100%;\r\n    max-width: 456px;\r\n    padding: 20px;\r\n    margin: auto;\r\n    /* row-gap: 20px; */\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div class=\"authlite-login\">\r\n  <app-design-one\r\n    [onSignin]=\"onSignin\"\r\n    [onSignup]=\"onSignup\"\r\n    [signinFormErrorMessages]=\"signinFormErrorMessages\"\r\n    [signupFormErrorMessages]=\"signupFormErrorMessages\"\r\n    [forgotPasswordFormErrorMessages]=\"forgotPasswordFormErrorMessages\"\r\n    [resendVerifyLinkFormErrorMessages]=\"resendVerifyLinkFormErrorMessages\"\r\n    [clearErrorMessages]=\"clearErrorMessages\"\r\n    [logo]=\"logo\"\r\n    [placeholder]=\"placeholder\"\r\n    [dictionary]=\"translationDictionary\"\r\n    [view]=\"view\"\r\n    (changeView)=\"changeView($event)\"\r\n    (onForgotPassword)=\"navigateToForgotPassword()\"\r\n    (onResendVerifyLink)=\"navigateToResendVerifyLink()\">\r\n  </app-design-one>\r\n</div>"
        },
        {
            "name": "LoginWrapperComponent",
            "id": "component-LoginWrapperComponent-6664fe7b27bb6cf7f865ca96796459dd96fff5f3070ea5881a99b947994f9e45cc6eba531e89f752e3bc6353d3c1206b3985352095eea447e9e0ef169c5b7903",
            "file": "src/app/login/login-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-wrapper",
            "styleUrls": [
                "./style.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login-wrapper.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "translationDictionary",
                    "defaultValue": "DEFAULT_TRANSLATION_DICTIONARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "TranslationDictionary",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "changeView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "forgotPasswordFormErrorMessages",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ForgotPasswordFormErrorMessages",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "PageView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "resendVerifyLinkFormErrorMessages",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResendVerifyLinkFormErrorMessages",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "signinFormErrorMessages",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SigninFormErrorMessages",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "signupFormErrorMessages",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignupFormErrorMessages",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "successPage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"signin\" | \"signup\" | \"forgotpassword\" | \"resendverifyemail\" | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "view",
                    "defaultValue": "PageView.signin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PageView",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "clearErrorMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToForgotPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToResendVerifyLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToSignin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToSignup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onForgotPasswordForm",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResendVerifyLinkForm",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSignin",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSignup",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { AuthenticationService } from '../services/AuthenticationService';\r\nimport SigninFormErrorMessages from '../types/SigninFormErrorMessagesType';\r\nimport SignupFormErrorMessages from '../types/SignupFormErrorMessagesType';\r\nimport ForgotPasswordFormErrorMessages from '../types/ForgotPasswordFormErrorMessagesType';\r\nimport ResendVerifyLinkFormErrorMessages from '../types/ResendVerifyLinkFormErrorMessagesType';\r\nimport PageView from '../types/PageViewType';\r\nimport { DEFAULT_TRANSLATION_DICTIONARY, TranslationDictionary } from '../types/TranslationDictionaryType';\r\nimport SigninRequest from '../types/SigninRequest';\r\n\r\n@Component({\r\n  selector: 'app-login-wrapper',\r\n  templateUrl: './login-wrapper.component.html',\r\n  styleUrls: ['./style.css']\r\n})\r\nexport class LoginWrapperComponent implements OnInit {\r\n\r\n  @Input() translationDictionary: TranslationDictionary = DEFAULT_TRANSLATION_DICTIONARY;\r\n  PageView: any;\r\n  view: PageView = PageView.signin;\r\n  successPage: 'signin' | 'signup' | 'forgotpassword' | 'resendverifyemail' | null = null;\r\n  signinFormErrorMessages: SigninFormErrorMessages = {};\r\n  signupFormErrorMessages: SignupFormErrorMessages = {};\r\n  forgotPasswordFormErrorMessages: ForgotPasswordFormErrorMessages = {};\r\n  resendVerifyLinkFormErrorMessages: ResendVerifyLinkFormErrorMessages = {};\r\n  changeView: any;\r\n\r\n  constructor(private authenticationService: AuthenticationService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSignin(data: any): void {\r\n    this.authenticationService.signin('production', 228, data).subscribe((response: any) => {\r\n      if (response.outcome === 'SUCCESS') {\r\n        this.view = PageView.placeholder;\r\n        this.successPage = 'signin';\r\n      }\r\n      this.signinFormErrorMessages = response.errorMessages;\r\n    });\r\n  }\r\n\r\n  onSignup(data: any): void {\r\n    this.authenticationService.signup('production', 228, data).subscribe((response: any) => {\r\n      console.log(response);\r\n      if (response.outcome === 'SUCCESS') {\r\n        this.view = PageView.placeholder;\r\n        this.successPage = 'signup';\r\n      }\r\n      this.signupFormErrorMessages = response.errorMessages;\r\n    });\r\n  }\r\n\r\n  onForgotPasswordForm(data: any): void {\r\n    this.authenticationService.ForgotPasswordForm('production', 228, data).subscribe((response: any) => {\r\n      console.log(response);\r\n      if (response.outcome === 'SUCCESS') {\r\n        this.view = PageView.placeholder;\r\n        this.successPage = 'forgotpassword';\r\n      }\r\n      this.forgotPasswordFormErrorMessages = response.errorMessages;\r\n    });\r\n  }\r\n\r\n  onResendVerifyLinkForm(data: any): void {\r\n    this.authenticationService.resendVerifyLink('production', 228, data).subscribe((response: any) => {\r\n      console.log(response);\r\n      if (response.outcome === 'SUCCESS') {\r\n        this.view = PageView.placeholder;\r\n        this.successPage = 'resendverifyemail';\r\n      }\r\n      this.resendVerifyLinkFormErrorMessages = response.errorMessages;\r\n    });\r\n  }\r\n\r\n  clearErrorMessages() {\r\n    this.signinFormErrorMessages = {};\r\n    this.signupFormErrorMessages = {};\r\n  }\r\n\r\n  navigateToSignin(): void {\r\n    this.view = PageView.signin;\r\n  }\r\n\r\n  navigateToSignup(): void {\r\n    this.view = PageView.signup;\r\n  }\r\n\r\n  navigateToForgotPassword(): void {\r\n    this.view = PageView.forgotpassword;\r\n  }\r\n\r\n  navigateToResendVerifyLink(): void {\r\n    this.view = PageView.resendverifyemail;\r\n  }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/index.css';\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700&display=swap');\r\n\r\nhtml body * {\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nhtml body {\r\n    font-size: 14px;\r\n}\r\n*{\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n.authlite-d1 {\r\n    display: grid;\r\n    grid-template-columns: 0 1fr;\r\n    min-height: 100vh;\r\n    height: 100%;\r\n    background-color: #fcfcfc;\r\n    color: #0c0c0c;\r\n}\r\n\r\n@media (min-width: 960px) {\r\n    .authlite-d1 {\r\n        grid-template-columns: auto 1fr;\r\n    }\r\n\r\n    .authlite-d1__left {\r\n        width: 450px;\r\n    }\r\n}\r\n\r\n.authlite-d1__left {\r\n    background: url(\"https://images.unsplash.com/photo-1547357812-b5afb3656fc1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\") center center / cover no-repeat;\r\n}\r\n\r\n.authlite-d1__right {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    height: 100%;\r\n    width: 100%;\r\n    max-width: 456px;\r\n    padding: 20px;\r\n    margin: auto;\r\n    /* row-gap: 20px; */\r\n}\r\n",
                    "styleUrl": "./style.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-login (signin)=\"onSignin($event)\" (signup)=\"onSignup($event)\" (forgotPassword)=\"onForgotPasswordForm($event)\"\r\n  (resendVerifyLink)=\"onResendVerifyLinkForm($event)\" [signinFormErrorMessages]=\"signinFormErrorMessages\"\r\n  [signupFormErrorMessages]=\"signupFormErrorMessages\"\r\n  [forgotPasswordFormErrorMessages]=\"forgotPasswordFormErrorMessages\"\r\n  [resendVerifyLinkFormErrorMessages]=\"resendVerifyLinkFormErrorMessages\" (clearErrorMessages)=\"clearErrorMessages()\"\r\n  [view]=\"view\" (changeView)=\"changeView($event)\">\r\n  <app-logo>\r\n    <img src=\"assets/authlite_black.svg\" alt=\"Authlite logo\" />\r\n  </app-logo>\r\n  <app-placeholder>\r\n    <ng-container *ngIf=\"successPage === 'signin'\">\r\n      <app-info-page heading=\"Authentication successful!\">\r\n        <app-info-page-description>\r\n          Posuere ipsum tellus ornare rutrumaliquam torquent fermentum euismod musvestibulum tincidunt cursus quisque\r\n          elitsuspendisse augue. rutrumaliquam commodo <a (click)=\"changeView(PageView.signin)\">login now</a> parturient\r\n          rutrumaliquam nec varius sociosqu.\r\n        </app-info-page-description>\r\n        <app-info-page-footnote>\r\n          Commodo nullam et facilisis hendrerit pharetra platea duis commodo nascetur libero aptent\r\n        </app-info-page-footnote>\r\n      </app-info-page>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"successPage === 'signup'\">\r\n      <app-info-page heading=\"User account created!\">\r\n        <app-info-page-description>\r\n          Gravida dolor suscipit urna sagittis per <a (click)=\"changeView(PageView.signin)\">login now</a> parturient eu.\r\n          laoreet congue fermentum ipsum tincidunt elementum auctor aptent aliquam feugiat interdum. porta sem metus\r\n          convallis donec nam sodales.\r\n        </app-info-page-description>\r\n        <app-info-page-footnote>\r\n          Rutrum elit lacus consequat justo luctus per proin venenatis varius quam dui dignissim etiam\r\n        </app-info-page-footnote>\r\n      </app-info-page>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"successPage === 'forgotpassword'\">\r\n      <app-info-page heading=\"Password reset link sent!\">\r\n        <app-info-page-description>\r\n          Gravida dolor suscipit urna sagittis per <a (click)=\"changeView(PageView.signin)\">login now</a> parturient eu.\r\n          laoreet congue fermentum ipsum tincidunt elementum auctor aptent aliquam feugiat interdum. porta sem metus\r\n          convallis donec nam sodales.\r\n        </app-info-page-description>\r\n        <app-info-page-footnote>\r\n          Rutrum elit lacus consequat justo luctus per proin venenatis varius quam dui dignissim etiam\r\n        </app-info-page-footnote>\r\n      </app-info-page>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"successPage === 'resendverifyemail'\">\r\n      <app-info-page heading=\"Email confirmation link sent!\">\r\n        <app-info-page-description>\r\n          Please check your email for <a (click)=\"changeView(PageView.signin)\">login now</a> parturient eu. laoreet\r\n          congue fermentum ipsum tincidunt elementum auctor aptent aliquam feugiat interdum. porta sem metus convallis\r\n          donec nam sodales.\r\n        </app-info-page-description>\r\n        <app-info-page-footnote>\r\n          Rutrum elit lacus consequat justo luctus per proin venenatis varius quam dui dignissim etiam\r\n        </app-info-page-footnote>\r\n      </app-info-page>\r\n    </ng-container>\r\n  </app-placeholder>\r\n</app-login>"
        },
        {
            "name": "LogoComponent",
            "id": "component-LogoComponent-7963a131ebdd7112961caef3757341d48521d8067e5b62b8d339baad04c58e14162538de8e44b4b62e34666079b36e6e16688facf56dec165a7da9e566ec9aec",
            "file": "src/app/Logo/logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-logo",
            "styleUrls": [
                "./logo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./logo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-logo',\r\n  templateUrl: './logo.component.html',\r\n  styleUrls: ['./logo.component.scss'],\r\n})\r\nexport class LogoComponent {\r\n  @Input() children: any;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".authlite-d1-logo img {\r\n    height: 42px;\r\n}",
                    "styleUrl": "./logo.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"authlite-d1-logo\">\r\n    <img src=\"https://authlite-widgets.ioak.io/static/media/authlite_black.449e265c.svg\" alt=\"Authlite logo\"/>\r\n</div>"
        },
        {
            "name": "MainFormComponent",
            "id": "component-MainFormComponent-dbbc457c7b15aa5b483170820a730d504b8b9a10cb29d31ce28651a245fa6d18693de10048fe77271240d38647b190acc1ecccb6f693babe86f77922fc18a750",
            "file": "src/app/login/MainForm/main-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-form",
            "styleUrls": [
                "./main-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "forgotPasswordFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ForgotPasswordFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onForgotPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onResendVerifyLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onSignin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "onSignup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "resendVerifyLinkFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ResendVerifyLinkFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "signinFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "SigninFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "signupFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "SignupFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "translationDictionary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "TranslationDictionary",
                    "decorators": []
                },
                {
                    "name": "view",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "PageView",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "changeView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "PageView",
                    "defaultValue": "PageView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "clearErrorMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleChangeView",
                    "args": [
                        {
                            "name": "view",
                            "type": "PageView",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "PageView",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleForgotPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleResendVerifyEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleSignin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleSignup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { TranslationDictionary } from '../../types/TranslationDictionaryType';\r\nimport PageView from '../../types/PageViewType';\r\nimport SigninFormErrorMessages from '../../types/SigninFormErrorMessagesType';\r\nimport SignupFormErrorMessages from '../../types/SignupFormErrorMessagesType';\r\nimport ForgotPasswordFormErrorMessages from '../../types/ForgotPasswordFormErrorMessagesType';\r\nimport ResendVerifyLinkFormErrorMessages from '../../types/ResendVerifyLinkFormErrorMessagesType';\r\n\r\n@Component({\r\n  selector: 'app-main-form',\r\n  templateUrl: './main-form.component.html',\r\n  styleUrls: ['./main-form.component.scss'],\r\n})\r\nexport class MainFormComponent implements OnInit {\r\n  @Input() logo: any;\r\n  @Input() placeholder: any;\r\n  @Input() onSignin: any;\r\n  @Input() onSignup: any;\r\n  @Input() onForgotPassword: any;\r\n  @Input() onResendVerifyLink: any;\r\n  @Input() signinFormErrorMessages!: SigninFormErrorMessages;\r\n  @Input() signupFormErrorMessages!: SignupFormErrorMessages;\r\n  @Input() forgotPasswordFormErrorMessages!: ForgotPasswordFormErrorMessages;\r\n  @Input() resendVerifyLinkFormErrorMessages!: ResendVerifyLinkFormErrorMessages;\r\n  @Input() translationDictionary!: TranslationDictionary;\r\n  @Input() view!: PageView;\r\n  PageView = PageView;\r\n  changeView: any;\r\n\r\n  ngOnInit(): void {\r\n    if (this.signinFormErrorMessages?.unverifiedEmail) {\r\n      this.changeView(PageView.resendverifyemail);\r\n    }\r\n  }\r\n\r\n  handleChangeView(view: PageView): void {\r\n    this.view = view;\r\n    this.clearErrorMessages();\r\n  }\r\n\r\n  handleSignup(): void {\r\n    this.handleChangeView(PageView.signup);\r\n  }\r\n\r\n  handleSignin(): void {\r\n    this.handleChangeView(PageView.signin);\r\n  }\r\n\r\n  handleForgotPassword(): void {\r\n    this.handleChangeView(PageView.forgotpassword);\r\n  }\r\n\r\n  handleResendVerifyEmail(): void {\r\n    this.handleChangeView(PageView.resendverifyemail);\r\n  }\r\n\r\n  clearErrorMessages(): void {\r\n    this.signinFormErrorMessages = {};\r\n    this.signupFormErrorMessages = {};\r\n    this.forgotPasswordFormErrorMessages = {};\r\n    this.resendVerifyLinkFormErrorMessages = {};\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "//@import '/.storybook/style.css';\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700&display=swap');\r\n\r\nhtml body * {\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nhtml body {\r\n    font-size: 14px;\r\n}",
                    "styleUrl": "./main-form.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div class=\"authlite-mainform\">\r\n  <app-header>\r\n    <ng-container *ngIf=\"logo\">{{ logo }}</ng-container>\r\n  </app-header>\r\n\r\n  <app-signin-form *ngIf=\"view === PageView.signin\" \r\n                    [onSignin]=\"onSignin\" [onSignup]=\"handleSignup\"\r\n                    [onForgotPassword]=\"handleForgotPassword\" \r\n                    [signinFormErrorMessages]=\"signinFormErrorMessages\"\r\n                    [dictionary]=\"translationDictionary\">\r\n  </app-signin-form>\r\n\r\n  <app-signup-form *ngIf=\"view === PageView.signup\" \r\n                    [onSignup]=\"handleSignup\" [onSignin]=\"handleSignin\"\r\n                    [signupFormErrorMessages]=\"signupFormErrorMessages\" \r\n                    [dictionary]=\"translationDictionary\">\r\n  </app-signup-form>\r\n\r\n  <app-forgot-password-form *ngIf=\"view === PageView.forgotpassword\" [onForgotPassword]=\"handleForgotPassword\"\r\n    [onSignin]=\"handleSignin\" [forgotPasswordFormErrorMessages]=\"forgotPasswordFormErrorMessages\"\r\n    [dictionary]=\"translationDictionary\">\r\n  </app-forgot-password-form>\r\n\r\n  <app-resend-verify-link-form *ngIf=\"view === PageView.resendverifyemail\"\r\n    [email]=\"signinFormErrorMessages?.unverifiedEmail || ''\" [onSignin]=\"handleSignin\"\r\n    [onResendVerifyLink]=\"handleResendVerifyEmail\"\r\n    [resendVerifyLinkFormErrorMessages]=\"resendVerifyLinkFormErrorMessages\" [dictionary]=\"translationDictionary\">\r\n  </app-resend-verify-link-form>\r\n\r\n  <ng-container *ngIf=\"view === PageView.placeholder\">\r\n    {{ placeholder }}\r\n  </ng-container>\r\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-92f4cc9cc0054ccf9d578fc1ebe06b6d7ed1424277151dbedd6cfe73ba15609d9919dcba6e9acbd021b43117d9ce1f28adf6630c681037299b01a4c726c15a8e",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HeaderComponent } from './header.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HeaderComponent],\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section class=\"storybook-page\">\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\n.storybook-page h2 {\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\n.storybook-page ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PlaceholderComponent",
            "id": "component-PlaceholderComponent-8432dd9b1c04fdbb03edf1c44aa93c9a05f40961c29ef71aca466f34007e10c85e6722f811c4ce1e61294b66325b7356f8d57bb7a134159a4c1706cc52314acd",
            "file": "src/app/Placeholder/placeholder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-Placeholder",
            "styleUrls": [
                "./placeholder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./placeholder.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-Placeholder',\r\n  templateUrl: './placeholder.component.html',\r\n  styleUrls: ['./placeholder.component.scss'],\r\n})\r\nexport class PlaceholderComponent {\r\n  \r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".authlite-d1-tagline {\r\n    text-align: center;\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    row-gap: 6px;\r\n}\r\n.authlite-d1-tagline__title {\r\n    font-size: 20px;\r\n}\r\n.authlite-d1-tagline__subtitle {\r\n    font-size: 12px;\r\n    opacity: 0.6;\r\n}",
                    "styleUrl": "./placeholder.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"authlite-placeholder\">\r\n    <ng-content></ng-content>\r\n</div>"
        },
        {
            "name": "ResendVerifyLinkFormComponent",
            "id": "component-ResendVerifyLinkFormComponent-3b5a1364713bf1ae88679b7385a546a8e5e32251f9638247b4948adc1c8e1ea1297c9fcfa710efdec295ae6c7971998626442ca3de6bd8121b296c83f41ec928",
            "file": "src/app/ResendVerifyLinkForm/resend-verify-link-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-resend-verify-link-form",
            "styleUrls": [
                "./resend-verify-link-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./resend-verify-link-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "translationDictionary",
                    "defaultValue": "DEFAULT_TRANSLATION_DICTIONARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "TranslationDictionary",
                    "decorators": []
                },
                {
                    "name": "translationName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TranslationName",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "resendVerifyLinkForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isUserExists",
                    "args": [
                        {
                            "name": "_email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { DEFAULT_TRANSLATION_DICTIONARY, TranslationDictionary, TranslationName, getTranslation } from '../types/TranslationDictionaryType';\r\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-resend-verify-link-form',\r\n  templateUrl: './resend-verify-link-form.component.html',\r\n  styleUrls: ['./resend-verify-link-form.component.scss'],\r\n})\r\nexport class ResendVerifyLinkFormComponent implements OnInit {\r\n\r\n  @Input() translationDictionary: TranslationDictionary = DEFAULT_TRANSLATION_DICTIONARY;\r\n\r\n  @Input() translationName!: TranslationName;\r\n\r\n  resendVerifyLinkForm!: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n  initForm(): void {\r\n    this.resendVerifyLinkForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n    });\r\n  }\r\n  get resendVerifyLinkFormGreetingTitle(): string {\r\n    return this.translationDictionary.RESEND_VERIFY_LINK_FORM__GREETING_TITLE;\r\n  }\r\n  get resendVerifyLinkFormGreetingSubtitle(): string {\r\n    return this.translationDictionary.RESEND_VERIFY_LINK_FORM__GREETING_SUBTITLE;\r\n  }\r\n  get resendVerifyLinkFormLabelEmail(): string {\r\n    return this.translationDictionary.RESEND_VERIFY_LINK_FORM__LABEL_EMAIL;\r\n  }\r\n  get resendVerifyLinkFormUsernameErrorMessage(): string {\r\n    return this.translationDictionary['RESEND_VERIFY_LINK_ERROR__BLANK_USERNAME'];\r\n  }\r\n  get resendVerifyLinkFormInvalidUsername(): string {\r\n    return this.translationDictionary.RESEND_VERIFY_LINK_ERROR__INVALID_USERNAME;\r\n  }\r\n  get resendVerifyLinkFormUserNotFound(): string {\r\n    return this.translationDictionary.RESEND_VERIFY_LINK_ERROR__USER_NOT_FOUND;\r\n  }\r\n  onSubmit(): void {\r\n    console.log('onSubmit')\r\n    if (this.resendVerifyLinkForm.invalid) {\r\n      this.resendVerifyLinkForm.markAllAsTouched();\r\n      return;\r\n    }\r\n    const enteredEmail = this.resendVerifyLinkForm.value.email;\r\n\r\n    if (!this.isUserExists(enteredEmail)) {\r\n      this.resendVerifyLinkForm.setErrors({ userNotFound: true });\r\n    }\r\n    else {\r\n      console.log('reset link sent to:', this.resendVerifyLinkForm.value);\r\n    }\r\n  }\r\n  isUserExists(_email: string): boolean {\r\n    return false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/index.css';\r\n\r\n.authlite-resendverifylink-form {\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    /* row-gap: 20px; */\r\n    width: 100%;\r\n}\r\n.authlite-action-bar,\r\n.authlite-action-bar-center {\r\n    font-size: 12px;\r\n}",
                    "styleUrl": "./resend-verify-link-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "resendVerifyLinkFormGreetingTitle": {
                    "name": "resendVerifyLinkFormGreetingTitle",
                    "getSignature": {
                        "name": "resendVerifyLinkFormGreetingTitle",
                        "type": "string",
                        "returnType": "string",
                        "line": 28
                    }
                },
                "resendVerifyLinkFormGreetingSubtitle": {
                    "name": "resendVerifyLinkFormGreetingSubtitle",
                    "getSignature": {
                        "name": "resendVerifyLinkFormGreetingSubtitle",
                        "type": "string",
                        "returnType": "string",
                        "line": 31
                    }
                },
                "resendVerifyLinkFormLabelEmail": {
                    "name": "resendVerifyLinkFormLabelEmail",
                    "getSignature": {
                        "name": "resendVerifyLinkFormLabelEmail",
                        "type": "string",
                        "returnType": "string",
                        "line": 34
                    }
                },
                "resendVerifyLinkFormUsernameErrorMessage": {
                    "name": "resendVerifyLinkFormUsernameErrorMessage",
                    "getSignature": {
                        "name": "resendVerifyLinkFormUsernameErrorMessage",
                        "type": "string",
                        "returnType": "string",
                        "line": 37
                    }
                },
                "resendVerifyLinkFormInvalidUsername": {
                    "name": "resendVerifyLinkFormInvalidUsername",
                    "getSignature": {
                        "name": "resendVerifyLinkFormInvalidUsername",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                },
                "resendVerifyLinkFormUserNotFound": {
                    "name": "resendVerifyLinkFormUserNotFound",
                    "getSignature": {
                        "name": "resendVerifyLinkFormUserNotFound",
                        "type": "string",
                        "returnType": "string",
                        "line": 43
                    }
                }
            },
            "templateData": "<form [formGroup]=\"resendVerifyLinkForm\" (ngSubmit)=\"onSubmit()\" class=\"authlite-resendverifylink-form\">\r\n  <div class=\"authlite-margin-top\">\r\n    <app-tagline [title]=\"resendVerifyLinkFormGreetingTitle\" [subtitle]=\"resendVerifyLinkFormGreetingSubtitle\">\r\n    </app-tagline>\r\n  </div>\r\n  <div class=\"authlite-margin-top\">\r\n    <app-form-element-message [email]=\"resendVerifyLinkFormLabelEmail\"></app-form-element-message>\r\n    <input type=\"email\" formControlName=\"email\" class=\"authlite-input\" name=\"email\" autocomplete=\"off\" value=\"\" />\r\n    <app-form-element-message\r\n      *ngIf=\"resendVerifyLinkForm.controls['email'].touched && resendVerifyLinkForm.controls['email'].hasError('required')\"\r\n      [blankUsername]=\"resendVerifyLinkFormUsernameErrorMessage\">\r\n    </app-form-element-message>\r\n    <app-form-element-message\r\n      *ngIf=\"resendVerifyLinkForm.controls['email'].touched && resendVerifyLinkForm.controls['email'].hasError('email')\"\r\n      [invalidUsername]=\"resendVerifyLinkFormInvalidUsername\">\r\n    </app-form-element-message>\r\n    <app-form-element-message *ngIf=\"resendVerifyLinkForm.errors?.['userNotFound']\"\r\n      [userNotFound]=\"resendVerifyLinkFormUserNotFound\">\r\n    </app-form-element-message>\r\n  </div>\r\n  <div class=\"authlite-action-bar authlite-margin-top\">\r\n    <button class=\"authlite-primary-button\" type=\"submit\">\r\n      {{ translationDictionary.RESEND_VERIFY_LINK_FORM__ACTION_SEND }}\r\n    </button>\r\n  </div>\r\n  <div class=\"authlite-action-bar-center authlite-margin-top\">\r\n    {{ translationDictionary.RESEND_VERIFY_LINK_FORM__MESSAGE_ALREADY_VERIFIED }}\r\n    <button class=\"authlite-button-as-link\" type=\"submit\">\r\n      {{ translationDictionary.RESEND_VERIFY_LINK_FORM__ACTION_SIGNIN }}\r\n    </button>\r\n  </div>\r\n</form>"
        },
        {
            "name": "SigninFormComponent",
            "id": "component-SigninFormComponent-7f9c02887094844340bc98f4294259090ca5d87590abc6d81359641a7b3c4ea852fcbe377bb83fd71f5eb8ca9e2f196315fd6ad4355ce3e5a36b142cbd0db241",
            "file": "src/app/signinForm/signin-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signin-form",
            "styleUrls": [
                "./signin-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signin-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "signinFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "SigninFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "translationDictionary",
                    "defaultValue": "DEFAULT_TRANSLATION_DICTIONARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "TranslationDictionary",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onForgotPassword",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onSignin",
                    "defaultValue": "new EventEmitter<SigninRequest>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<SigninRequest>"
                },
                {
                    "name": "onSignup",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "showPassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "signinForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "state",
                    "defaultValue": "{\r\n    email: '',\r\n    password: ''\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SigninRequest",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "TranslationName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslationName",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToForgotPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToSignup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "togglePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { TranslationDictionary, TranslationName, getTranslation, DEFAULT_TRANSLATION_DICTIONARY } from '../types/TranslationDictionaryType';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationService } from '../services/AuthenticationService';\r\nimport SigninFormErrorMessages from '../types/SigninFormErrorMessagesType';\r\nimport SigninRequest from '../types/SigninRequest';\r\nimport PageView from '../types/PageViewType';\r\n\r\n@Component({\r\n  selector: 'app-signin-form',\r\n  templateUrl: './signin-form.component.html',\r\n  styleUrls: ['./signin-form.component.scss'],\r\n})\r\n\r\nexport class SigninFormComponent {\r\n\r\n  @Output() onSignin: EventEmitter<SigninRequest> = new EventEmitter<SigninRequest>();\r\n  @Output() onSignup: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() onForgotPassword: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  @Input() signinFormErrorMessages!: SigninFormErrorMessages;\r\n\r\n  @Input() translationDictionary: TranslationDictionary = DEFAULT_TRANSLATION_DICTIONARY;\r\n\r\n  signinForm!: FormGroup;\r\n\r\n  showPassword: boolean = true; //password eye icon functionality\r\n\r\n  TranslationName!: TranslationName;\r\n\r\n  constructor(private fb: FormBuilder,\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService) {\r\n    this.signinForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  get formControls() {\r\n    return this.signinForm.controls;\r\n  }\r\n\r\n  onInput(event: any) {\r\n    const { name, value } = event.target;\r\n    this.signinForm.patchValue({ [name]: value });\r\n  }\r\n\r\n  togglePassword() {\r\n    this.showPassword = !this.showPassword\r\n  }\r\n\r\n  state: SigninRequest = {\r\n    email: '',\r\n    password: ''\r\n  };\r\n\r\n\r\n  initForm(): void {\r\n    this.signinForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  onSubmit(event: Event): void {\r\n    console.log('onSubmit')\r\n    event.preventDefault();\r\n    if (this.signinForm.valid) \r\n      {\r\n      const signinRequest = this.signinForm.value;\r\n      const environment = 'production';\r\n      const realm = '228';\r\n\r\n      this.authenticationService.signin(environment, realm, signinRequest).subscribe(\r\n        (response: any) => {\r\n          console.log('Login Successfull', response);\r\n            this.router.navigate(['/signup-form']);\r\n        },\r\n\r\n        (error: any) => {\r\n          console.error('Login Error:', error);\r\n        }\r\n      );\r\n\r\n    } else {\r\n      this.signinForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  getTranslation(key: string): string {\r\n    return this.translationDictionary[key] || '';\r\n  }\r\n\r\n\r\n  navigateToSignup() {\r\n    this.router.navigate(['/signup-form']);\r\n  }\r\n\r\n  navigateToForgotPassword() {\r\n    this.router.navigate(['/forgot-password-form']);\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/index.css';\r\n\r\n*{\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n.authlite-signin-form {\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    width: 100%;\r\n}\r\n.authlite-signin-form__forgot {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n}\r\n.authlite-d1-tagline {\r\n    text-align: center;\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    row-gap: 6px;\r\n}\r\n.authlite-d1-tagline__title {\r\n    font-size: 20px;\r\n}\r\n.authlite-d1-tagline__subtitle {\r\n    font-size: 12px;\r\n    opacity: 0.6;\r\n}\r\n.authlite-action-bar,\r\n.authlite-action-bar-center {\r\n    font-size: 12px;\r\n}\r\n.authlite-input-container {\r\n  position: relative;\r\n}\r\n\r\n.authlite-input {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.authlite-password-hide-icon,\r\n.authlite-password-show-icon {\r\n  position: absolute;\r\n  top: 40%;\r\n  right: 10px;\r\n  transform: translateY(-50%);\r\n  cursor: pointer;\r\n  width: 4%;\r\n}\r\n\r\n.authlite-password-show-icon {\r\n  //display: none;\r\n  width: 4%;\r\n}\r\n\r\n.authlite-input-container.show-password .authlite-password-hide-icon {\r\n  display: none;\r\n}\r\n\r\n.authlite-input-container.show-password .authlite-password-show-icon {\r\n  display: block;\r\n}",
                    "styleUrl": "./signin-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "formControls": {
                    "name": "formControls",
                    "getSignature": {
                        "name": "formControls",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                }
            },
            "templateData": "<form [formGroup]=\"signinForm\" (ngSubmit)=\"onSubmit($event)\" class=\"authlite-signin-form\">\r\n    <div class='authlite-margin-top'>\r\n        <app-tagline [title]=\"getTranslation('SIGNIN_FORM__GREETING_TITLE')\"\r\n            [subtitle]=\"getTranslation('SIGNIN_FORM__GREETING_SUBTITLE')\">\r\n        </app-tagline>\r\n    </div>\r\n    <div class='authlite-margin-top'>\r\n        <app-form-element-message [text]=\"getTranslation('SIGNIN_FORM__LABEL_USERNAME')\"\r\n            type='label'></app-form-element-message>\r\n        <input class=\"authlite-input\" formControlName=\"email\" [(ngModel)]=\"state.email\" autocomplete='off'\r\n            (input)=\"onInput($event)\" />\r\n        <app-form-element-message *ngIf=\"formControls['email'].touched && formControls['email'].hasError('required')\"\r\n            [text]=\"getTranslation(signinFormErrorMessages['email'] || 'SIGNIN_ERROR__BLANK_USERNAME')\" type='error'>\r\n        </app-form-element-message>\r\n        <app-form-element-message *ngIf=\"formControls['email'].hasError('email')\"\r\n            [text]=\"getTranslation(signinFormErrorMessages['email'] || 'SIGNIN_ERROR__INVALID_USERNAME')\" type='error'>\r\n        </app-form-element-message>\r\n        <app-form-element-message *ngIf=\"formControls['email'].hasError('userNotFound')\"\r\n            [text]=\"getTranslation(signinFormErrorMessages['email'] || 'SIGNIN_ERROR__USER_NOT_FOUND')\" type='error'>\r\n        </app-form-element-message>\r\n    </div>\r\n    <div class='authlite-margin-top'>\r\n        <app-form-element-message [text]=\"getTranslation('SIGNIN_FORM__LABEL_PASSWORD')\"\r\n            type='label'></app-form-element-message>\r\n        <div class=\"authlite-input-container\">\r\n            <input [type]=\"showPassword?'password':'text'\" id=\"passwordId\" formControlName=\"password\"\r\n                class=\"authlite-input\" name=\"password\" value=\"\" (input)=\"onInput($event)\">\r\n            <span (click)=\"togglePassword()\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\" *ngIf=\"!showPassword\"\r\n                    class=\"authlite-password-hide-icon\">\r\n                    <path\r\n                        d=\"M320 400c-75.9 0-137.3-58.7-142.9-133.1L72.2 185.8c-13.8 17.3-26.5 35.6-36.7 55.6a32.4 32.4 0 0 0 0 29.2C89.7 376.4 197.1 448 320 448c26.9 0 52.9-4 77.9-10.5L346 397.4a144.1 144.1 0 0 1 -26 2.6zm313.8 58.1l-110.6-85.4a331.3 331.3 0 0 0 81.3-102.1 32.4 32.4 0 0 0 0-29.2C550.3 135.6 442.9 64 320 64a308.2 308.2 0 0 0 -147.3 37.7L45.5 3.4A16 16 0 0 0 23 6.2L3.4 31.5A16 16 0 0 0 6.2 53.9l588.4 454.7a16 16 0 0 0 22.5-2.8l19.6-25.3a16 16 0 0 0 -2.8-22.5zm-183.7-142l-39.3-30.4A94.8 94.8 0 0 0 416 256a94.8 94.8 0 0 0 -121.3-92.2A47.7 47.7 0 0 1 304 192a46.6 46.6 0 0 1 -1.5 10l-73.6-56.9A142.3 142.3 0 0 1 320 112a143.9 143.9 0 0 1 144 144c0 21.6-5.3 41.8-13.9 60.1z\" />\r\n                </svg>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\" *ngIf=\"showPassword\"\r\n                    class=\"authlite-password-show-icon\">\r\n                    <path\r\n                        d=\"M288 32c-80.8 0-145.5 36.8-192.6 80.6C48.6 156 17.3 208 2.5 243.7c-3.3 7.9-3.3 16.7 0 24.6C17.3 304 48.6 356 95.4 399.4C142.5 443.2 207.2 480 288 480s145.5-36.8 192.6-80.6c46.8-43.5 78.1-95.4 93-131.1c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C433.5 68.8 368.8 32 288 32zM144 256a144 144 0 1 1 288 0 144 144 0 1 1 -288 0zm144-64c0 35.3-28.7 64-64 64c-7.1 0-13.9-1.2-20.3-3.3c-5.5-1.8-11.9 1.6-11.7 7.4c.3 6.9 1.3 13.8 3.2 20.7c13.7 51.2 66.4 81.6 117.6 67.9s81.6-66.4 67.9-117.6c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3z\" />\r\n                </svg>\r\n            </span>\r\n        </div>\r\n        <app-form-element-message\r\n            *ngIf=\"formControls['password'].touched && formControls['password'].hasError('required')\"\r\n            [text]=\"getTranslation(signinFormErrorMessages['password'] || 'SIGNIN_ERROR__BLANK_PASSWORD')\" type='error'>\r\n        </app-form-element-message>\r\n        <app-form-element-message *ngIf=\"formControls['password'].hasError('incorrectPassword')\"\r\n            [text]=\"getTranslation(signinFormErrorMessages['password'] || 'SIGNIN_ERROR__INCORRECT_PASSWORD')\"\r\n            type='error'>\r\n        </app-form-element-message>\r\n    </div>\r\n    <div class=\"authlite-signin-form__forgot authlite-margin-top-small\">\r\n        <app-checkbox label='Remember me'></app-checkbox>\r\n        <button class=\"authlite-button-as-link\" type=\"button\" (click)=\"navigateToForgotPassword()\">\r\n            {{ getTranslation('SIGNIN_FORM__ACTION_FORGOTPASSWORD') }}\r\n        </button>\r\n    </div>\r\n    <div class=\"authlite-action-bar authlite-margin-top\">\r\n        <button class=\"authlite-primary-button\" type=\"submit\">{{ getTranslation('SIGNIN_FORM__ACTION_SIGNIN')\r\n            }}</button>\r\n    </div>\r\n    <div class=\"authlite-margin-top authlite-action-bar-center\">\r\n        {{ getTranslation('SIGNIN_FORM__MESSAGE_NO_ACCOUNT') }}\r\n        <button class=\"authlite-button-as-link\" type=\"button\" (click)=\"navigateToSignup()\">{{\r\n            getTranslation('SIGNIN_FORM__ACTION_CREATEACCOUNT') }}</button>\r\n    </div>\r\n</form>"
        },
        {
            "name": "SignupFormComponent",
            "id": "component-SignupFormComponent-da1c68d4deaa533f2f9333becb6f3617043f221e7968e099e876a492263a41cdbedec3802b75dbcb432be453197405309cea2c3c687a6e4e5d45c9f3b3cb9d79",
            "file": "src/app/SignupForm/signup-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup-form",
            "styleUrls": [
                "./signup-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signup-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "signupFormErrorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "SignupFormErrorMessages",
                    "decorators": []
                },
                {
                    "name": "translationDictionary",
                    "defaultValue": "DEFAULT_TRANSLATION_DICTIONARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "TranslationDictionary",
                    "decorators": []
                },
                {
                    "name": "translationName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "TranslationName",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onForgotPassword",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onSignin",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onSignup",
                    "defaultValue": "new EventEmitter<SignupRequest>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<SignupRequest>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "showPassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "signupForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "state",
                    "defaultValue": "{\r\n    given_name: '',\r\n    family_name: '',\r\n    email: '',\r\n    password: '',\r\n    retype_password: ''\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignupRequest",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToSignin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "passwordMatchValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "togglePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { DEFAULT_TRANSLATION_DICTIONARY, TranslationDictionary, TranslationName, getTranslation } from '../types/TranslationDictionaryType';\r\nimport { FormBuilder, FormGroup, Validators, AbstractControl, NgForm } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationService } from \"../services/AuthenticationService\";\r\nimport SignupRequest from '../types/SignupRequest';\r\nimport SignupFormErrorMessages from '../types/SignupFormErrorMessagesType';\r\n\r\n@Component({\r\n  selector: 'app-signup-form',\r\n  templateUrl: './signup-form.component.html',\r\n  styleUrls: ['./signup-form.component.scss'],\r\n})\r\nexport class SignupFormComponent {\r\n\r\n  @Output() onSignup: EventEmitter<SignupRequest> = new EventEmitter<SignupRequest>();\r\n  @Output() onSignin: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() onForgotPassword: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  @Input() translationDictionary: TranslationDictionary = DEFAULT_TRANSLATION_DICTIONARY;\r\n\r\n  @Input() translationName!: TranslationName;\r\n\r\n  @Input() signupFormErrorMessages!: SignupFormErrorMessages;\r\n\r\n  signupForm!: FormGroup;\r\n\r\n  showPassword: boolean = true;\r\n\r\n  togglePassword() {\r\n    this.showPassword = !this.showPassword\r\n  }\r\n\r\n  constructor(private fb: FormBuilder,\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService) \r\n    {\r\n      this.signupForm = this.fb.group({\r\n        given_name: ['', Validators.required],\r\n        family_name: ['', Validators.required],\r\n        email: ['', [Validators.required, Validators.email]],\r\n        password: ['', Validators.required],\r\n        retype_password: ['', Validators.required],\r\n      },\r\n      {\r\n        validators: this.passwordMatchValidator,\r\n      });\r\n    }\r\n\r\n  passwordMatchValidator(control: AbstractControl): { [key: string]: boolean } | null {\r\n    const password = control.get('password');\r\n    const retypePassword = control.get('retype_password');\r\n\r\n    if (password && retypePassword && password.value !== retypePassword.value) {\r\n      return { 'passwordMismatch': true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  get formControls() {\r\n    return this.signupForm.controls;\r\n  }\r\n\r\n  onInput(event: any) {\r\n    const { name, value } = event.target;\r\n    this.signupForm.patchValue({ [name]: value });\r\n  }\r\n\r\n  state: SignupRequest = {\r\n    given_name: '',\r\n    family_name: '',\r\n    email: '',\r\n    password: '',\r\n    retype_password: ''\r\n  };\r\n  \r\n  onSubmit(event: Event): void {\r\n    console.log('onSubmit')\r\n    event.preventDefault();\r\n    if (this.signupForm.valid)\r\n    {\r\n      const signinRequest = this.signupForm.value;\r\n      const environment = 'production';\r\n      const realm = '228';\r\n\r\n      this.authenticationService.signup(environment, realm, signinRequest).subscribe(\r\n        (response: any) => {\r\n          console.log('Signup Successful:', response);\r\n          this.router.navigate(['/signup-success-page']);\r\n        },\r\n        (error: any) => {\r\n          console.error('Signup Error:', error);\r\n        }\r\n      );\r\n    }\r\n    else {\r\n      this.signupForm.markAllAsTouched();\r\n    }\r\n  }\r\n  getTranslation(key: string): string {\r\n    return this.translationDictionary[key] || '';\r\n  }\r\n\r\n  navigateToSignin() {\r\n    this.onSignin.emit();\r\n    this.router.navigate(['/signin-form']);\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/index.css';\r\n.authlite-action-bar,\r\n.authlite-action-bar-center {\r\n    font-size: 12px;\r\n}\r\n.authlite-input-container {\r\n\tposition: relative;\r\n  }\r\n  \r\n  .authlite-input {\r\n\twidth: 100%;\r\n\tpadding: 10px;\r\n\tmargin-bottom: 10px;\r\n  }\r\n  \r\n  .authlite-password-hide-icon,\r\n  .authlite-password-show-icon {\r\n\tposition: absolute;\r\n\ttop: 40%;\r\n\tright: 10px;\r\n\ttransform: translateY(-50%);\r\n\tcursor: pointer;\r\n\twidth: 4%;\r\n  }\r\n  \r\n  .authlite-password-show-icon {\r\n\t//display: none;\r\n\twidth: 4%;\r\n  }\r\n  \r\n  .authlite-input-container.show-password .authlite-password-hide-icon {\r\n\tdisplay: none;\r\n  }\r\n  \r\n  .authlite-input-container.show-password .authlite-password-show-icon {\r\n\tdisplay: block;\r\n  }",
                    "styleUrl": "./signup-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "formControls": {
                    "name": "formControls",
                    "getSignature": {
                        "name": "formControls",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            },
            "templateData": "<form class=\"authlite-d1-signup-form\" [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit($event)\">\r\n  <div class=\"authlite-margin-top\">\r\n    <app-tagline \r\n        [title]=\"getTranslation('SIGNUP_FORM__GREETING_TITLE')\" \r\n        [subtitle]=\"getTranslation('SIGNUP_FORM__GREETING_SUBTITLE')\">\r\n    </app-tagline>\r\n  </div>\r\n  <div class=\"authlite-margin-top\">\r\n    <app-form-element-message [text]=\"getTranslation('SIGNUP_FORM__LABEL_GIVENNAME')\" type='label'></app-form-element-message>\r\n    <input class=\"authlite-input\" formControlName=\"given_name\" [(ngModel)]=\"state.given_name\" autocomplete='off' autofocus (input)=\"onInput($event)\"/>\r\n    <app-form-element-message \r\n            *ngIf=\"formControls['given_name'].touched && formControls['given_name'].hasError('required')\"\r\n            [text]=\"getTranslation(signupFormErrorMessages['given_name'] || 'SIGNUP_ERROR__BLANK_GIVENNAME')\" type='error'>\r\n      </app-form-element-message>\r\n  </div>\r\n  <div class=\"authlite-margin-top\">\r\n    <app-form-element-message [text]=\"getTranslation('SIGNUP_FORM__LABEL_FAMILYNAME')\" type='label'></app-form-element-message>\r\n    <input class=\"authlite-input\" formControlName=\"family_name\" [(ngModel)]=\"state.family_name\" autocomplete='off' autofocus (input)=\"onInput($event)\"/>\r\n    <app-form-element-message \r\n            *ngIf=\"formControls['family_name'].touched && formControls['family_name'].hasError('required')\"\r\n            [text]=\"getTranslation(signupFormErrorMessages['family_name'] || 'SIGNUP_ERROR__BLANK_FAMILYNAME')\" type='error'>\r\n      </app-form-element-message>\r\n  </div>\r\n  <div class=\"authlite-margin-top\">\r\n    <app-form-element-message [text]=\"getTranslation('SIGNUP_FORM__LABEL_EMAIL')\" type='label'></app-form-element-message>\r\n    <input class=\"authlite-input\" formControlName=\"email\" [(ngModel)]=\"state.email\" autocomplete='off' (input)=\"onInput($event)\"/>\r\n    <app-form-element-message \r\n          *ngIf=\"formControls['email'].touched && formControls['email'].hasError('required')\"\r\n          [text]=\"getTranslation(signupFormErrorMessages['email'] || 'SIGNUP_ERROR__BLANK_USERNAME')\" type='error'>\r\n    </app-form-element-message>\r\n    <app-form-element-message \r\n          *ngIf=\"formControls['email'].hasError('email')\"\r\n          [text]=\"getTranslation(signupFormErrorMessages['email'] || 'SIGNUP_ERROR__INVALID_USERNAME')\" type='error'>\r\n    </app-form-element-message>\r\n  </div>\r\n  <div class=\"authlite-margin-top\">\r\n    <app-form-element-message [text]=\"getTranslation('SIGNUP_FORM__LABEL_PASSWORD')\" type='label'></app-form-element-message>\r\n      <div class=\"authlite-input-container\">\r\n        <input [type]=\"showPassword?'password':'text'\" formControlName=\"password\" class=\"authlite-input\" name=\"password\" value=\"\">\r\n        <span (click)=\"togglePassword()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\" *ngIf=\"!showPassword\" class=\"authlite-password-hide-icon\">\r\n                <path d=\"M320 400c-75.9 0-137.3-58.7-142.9-133.1L72.2 185.8c-13.8 17.3-26.5 35.6-36.7 55.6a32.4 32.4 0 0 0 0 29.2C89.7 376.4 197.1 448 320 448c26.9 0 52.9-4 77.9-10.5L346 397.4a144.1 144.1 0 0 1 -26 2.6zm313.8 58.1l-110.6-85.4a331.3 331.3 0 0 0 81.3-102.1 32.4 32.4 0 0 0 0-29.2C550.3 135.6 442.9 64 320 64a308.2 308.2 0 0 0 -147.3 37.7L45.5 3.4A16 16 0 0 0 23 6.2L3.4 31.5A16 16 0 0 0 6.2 53.9l588.4 454.7a16 16 0 0 0 22.5-2.8l19.6-25.3a16 16 0 0 0 -2.8-22.5zm-183.7-142l-39.3-30.4A94.8 94.8 0 0 0 416 256a94.8 94.8 0 0 0 -121.3-92.2A47.7 47.7 0 0 1 304 192a46.6 46.6 0 0 1 -1.5 10l-73.6-56.9A142.3 142.3 0 0 1 320 112a143.9 143.9 0 0 1 144 144c0 21.6-5.3 41.8-13.9 60.1z\"/>\r\n            </svg>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\" *ngIf=\"showPassword\" class=\"authlite-password-show-icon\">\r\n                <path d=\"M288 32c-80.8 0-145.5 36.8-192.6 80.6C48.6 156 17.3 208 2.5 243.7c-3.3 7.9-3.3 16.7 0 24.6C17.3 304 48.6 356 95.4 399.4C142.5 443.2 207.2 480 288 480s145.5-36.8 192.6-80.6c46.8-43.5 78.1-95.4 93-131.1c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C433.5 68.8 368.8 32 288 32zM144 256a144 144 0 1 1 288 0 144 144 0 1 1 -288 0zm144-64c0 35.3-28.7 64-64 64c-7.1 0-13.9-1.2-20.3-3.3c-5.5-1.8-11.9 1.6-11.7 7.4c.3 6.9 1.3 13.8 3.2 20.7c13.7 51.2 66.4 81.6 117.6 67.9s81.6-66.4 67.9-117.6c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3z\"/>\r\n            </svg>\r\n        </span>\r\n    </div>\r\n    <app-form-element-message \r\n        *ngIf=\"formControls['password'].touched && formControls['password'].hasError('required')\"\r\n        [text]=\"getTranslation(signupFormErrorMessages['password'] || 'SIGNUP_ERROR__BLANK_PASSWORD')\" type='error'>\r\n</app-form-element-message>\r\n  </div>\r\n  <div class=\"authlite-margin-top\">\r\n    <app-form-element-message [text]=\"getTranslation('SIGNUP_FORM__LABEL_RETYPEPASSWORD')\" type='label'></app-form-element-message>\r\n      <div class=\"authlite-input-container\">\r\n        <input [type]=\"showPassword?'password':'text'\" formControlName=\"retype_password\" class=\"authlite-input\" name=\"retype_password\" value=\"\">\r\n        <span (click)=\"togglePassword()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\" *ngIf=\"!showPassword\" class=\"authlite-password-hide-icon\">\r\n                <path d=\"M320 400c-75.9 0-137.3-58.7-142.9-133.1L72.2 185.8c-13.8 17.3-26.5 35.6-36.7 55.6a32.4 32.4 0 0 0 0 29.2C89.7 376.4 197.1 448 320 448c26.9 0 52.9-4 77.9-10.5L346 397.4a144.1 144.1 0 0 1 -26 2.6zm313.8 58.1l-110.6-85.4a331.3 331.3 0 0 0 81.3-102.1 32.4 32.4 0 0 0 0-29.2C550.3 135.6 442.9 64 320 64a308.2 308.2 0 0 0 -147.3 37.7L45.5 3.4A16 16 0 0 0 23 6.2L3.4 31.5A16 16 0 0 0 6.2 53.9l588.4 454.7a16 16 0 0 0 22.5-2.8l19.6-25.3a16 16 0 0 0 -2.8-22.5zm-183.7-142l-39.3-30.4A94.8 94.8 0 0 0 416 256a94.8 94.8 0 0 0 -121.3-92.2A47.7 47.7 0 0 1 304 192a46.6 46.6 0 0 1 -1.5 10l-73.6-56.9A142.3 142.3 0 0 1 320 112a143.9 143.9 0 0 1 144 144c0 21.6-5.3 41.8-13.9 60.1z\"/>\r\n            </svg>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\" *ngIf=\"showPassword\" class=\"authlite-password-show-icon\">\r\n                <path d=\"M288 32c-80.8 0-145.5 36.8-192.6 80.6C48.6 156 17.3 208 2.5 243.7c-3.3 7.9-3.3 16.7 0 24.6C17.3 304 48.6 356 95.4 399.4C142.5 443.2 207.2 480 288 480s145.5-36.8 192.6-80.6c46.8-43.5 78.1-95.4 93-131.1c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C433.5 68.8 368.8 32 288 32zM144 256a144 144 0 1 1 288 0 144 144 0 1 1 -288 0zm144-64c0 35.3-28.7 64-64 64c-7.1 0-13.9-1.2-20.3-3.3c-5.5-1.8-11.9 1.6-11.7 7.4c.3 6.9 1.3 13.8 3.2 20.7c13.7 51.2 66.4 81.6 117.6 67.9s81.6-66.4 67.9-117.6c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3z\"/>\r\n            </svg>\r\n        </span>\r\n    </div>\r\n    <app-form-element-message \r\n        *ngIf=\"formControls['password'].touched && formControls['password'].hasError('required')\"\r\n        [text]=\"getTranslation(signupFormErrorMessages['password'] || 'SIGNUP_ERROR__BLANK_RETYPEPASSWORD')\" type='error'>\r\n    </app-form-element-message>\r\n      <app-form-element-message \r\n          *ngIf=\"signupForm.hasError('passwordMismatch') && (formControls['retype_password'].touched || formControls['password'].touched)\"\r\n          [text]=\"getTranslation(signupFormErrorMessages['password'] || 'SIGNUP_ERROR__PASSWORDS_DO_NOT_MATCH')\" type='error'>\r\n    </app-form-element-message>\r\n  </div>\r\n  <div class=\"authlite-action-bar authlite-margin-top\">\r\n      <button class=\"authlite-primary-button\" type=\"submit\">{{translationDictionary.SIGNUP_FORM__ACTION_CREATEACCOUNT}}</button>\r\n  </div>\r\n  <div class=\"authlite-margin-top authlite-action-bar-center\">\r\n      {{translationDictionary.SIGNUP_FORM__MESSAGE_EXISTING_ACCOUNT}}\r\n      <button class=\"authlite-button-as-link\" type=\"button\" (click)=\"navigateToSignin()\">{{translationDictionary.SIGNUP_FORM__ACTION_SIGNIN}}</button>\r\n  </div>\r\n</form>"
        },
        {
            "name": "SignupSuccessPageComponent",
            "id": "component-SignupSuccessPageComponent-046ad6373c0afbae4dcb44014d1ad60bbf6ca9a227773eac75d1d96c3e5451b07f394184c7ff8efccba179dfd9dd32f987c490aceba3f64622f8aeb74ab0a3dd",
            "file": "src/app/SignupSuccessPage/signup-success-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup-success-page",
            "styleUrls": [
                "./signup-success-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signup-success-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "heading",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-signup-success-page',\r\n  templateUrl: './signup-success-page.component.html',\r\n  styleUrls: ['./signup-success-page.component.scss'],\r\n})\r\nexport class SignupSuccessPageComponent {\r\n  @Input() heading: string = '';\r\n  @Input() children: any;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".authlite-infopage {\r\n    display: grid;\r\n    justify-items: center;\r\n    /* row-gap: 20px; */\r\n    /* width: 340px; */\r\n    max-width: 90vw;\r\n    text-align: center;\r\n    font-size: 14px;\r\n}\r\n.authlite-infopage h1 {\r\n    font-weight: 400;\r\n    font-size: 30px;\r\n}",
                    "styleUrl": "./signup-success-page.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"authlite-infopage\">\r\n    <h1>{{ heading }}</h1>\r\n    <ng-container *ngIf=\"children\">{{ children }}</ng-container>\r\n  </div>"
        },
        {
            "name": "TaglineComponent",
            "id": "component-TaglineComponent-e98c5f623bf1bd4cedbdd5261f41485eb2e587a0fae3008b454bb5b7bb16cf857511617745679fd6ca08c821c7454e69cf34a7e65d40b31c600085e446553f3b",
            "file": "src/app/Tagline/tagline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tagline",
            "styleUrls": [
                "./tagline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tagline.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tagline',\r\n  templateUrl: './tagline.component.html',\r\n  styleUrls: ['./tagline.component.scss'],\r\n})\r\nexport class TaglineComponent {\r\n  @Input() title!: string;\r\n  @Input() subtitle!: string;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".authlite-d1-tagline {\r\n    text-align: center;\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    row-gap: 6px;\r\n}\r\n.authlite-d1-tagline__title {\r\n    font-size: 20px;\r\n}\r\n.authlite-d1-tagline__subtitle {\r\n    font-size: 12px;\r\n    opacity: 0.6;\r\n}",
                    "styleUrl": "./tagline.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"authlite-d1-tagline\">\r\n    <div *ngIf=\"title\" class=\"authlite-d1-tagline__title\">{{title}}</div>\r\n    <div *ngIf=\"subtitle\" class=\"authlite-d1-tagline__subtitle\">{{subtitle}}</div>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-d942ed25d7bc2eee0e01d78616314f88a79d4cca960b96a3fbe9e6a22ebc10c7c6c1704142a6640b798735d1ab9e54608c0e78059f24b1e866a059c444a37988",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AuthenticationService } from './services/AuthenticationService';\r\nimport { AppComponent } from './app.component';\r\nimport { DesignOneComponent } from './login/DesignOne/design-one.component';\r\nimport { MainFormComponent } from './login/MainForm/main-form.component';\r\nimport { HeaderComponent } from './Header/header.component';\r\nimport { LogoComponent } from './Logo/logo.component';\r\nimport { FormElementMessageComponent } from './shared/FormElementMessage/form-element-message.component';\r\nimport { LoginWrapperComponent } from './login/login-wrapper.component';\r\nimport { LoginComponent } from './login/login/login.component';\r\nimport { SigninFormComponent } from './signinForm/signin-form.component';\r\nimport { CheckboxComponent } from './ui/checkbox/checkbox.component';\r\nimport { ForgotPasswordFormComponent } from './ForgotPasswordForm/forgot-password-form.component';\r\nimport { SignupFormComponent } from './SignupForm/signup-form.component';\r\nimport { ResendVerifyLinkFormComponent } from './ResendVerifyLinkForm/resend-verify-link-form.component';\r\nimport { SignupSuccessPageComponent } from './SignupSuccessPage/signup-success-page.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DesignOneComponent,\r\n    MainFormComponent,\r\n    HeaderComponent,\r\n    LogoComponent,\r\n    FormElementMessageComponent,\r\n    LoginWrapperComponent,\r\n    LoginComponent,\r\n    SigninFormComponent,\r\n    CheckboxComponent,\r\n    ForgotPasswordFormComponent,\r\n    SignupFormComponent,\r\n    ResendVerifyLinkFormComponent,\r\n    SignupSuccessPageComponent, \r\n  ],\r\n  imports: [\r\n    AppComponent,\r\n    BrowserModule, \r\n    ReactiveFormsModule, \r\n    HttpClientModule,\r\n  ],\r\n  providers: [AuthenticationService],\r\n  schemas:[CUSTOM_ELEMENTS_SCHEMA],\r\n  bootstrap: []\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthenticationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "DesignOneComponent"
                        },
                        {
                            "name": "ForgotPasswordFormComponent"
                        },
                        {
                            "name": "FormElementMessageComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LoginWrapperComponent"
                        },
                        {
                            "name": "LogoComponent"
                        },
                        {
                            "name": "MainFormComponent"
                        },
                        {
                            "name": "ResendVerifyLinkFormComponent"
                        },
                        {
                            "name": "SigninFormComponent"
                        },
                        {
                            "name": "SignupFormComponent"
                        },
                        {
                            "name": "SignupSuccessPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-eed7d5e4540656d743d3e200c238e527d4092a337d8ebd38394a8faa94627b9727972b15a4a4e444f9f6c0c8853f2acc43034a75e39d36e7695568ad75aba488",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.routes.ts",
            "methods": [],
            "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SigninFormComponent } from './signinForm/signin-form.component';\r\nimport { ForgotPasswordFormComponent } from './ForgotPasswordForm/forgot-password-form.component';\r\nimport { SignupFormComponent } from './SignupForm/signup-form.component';\r\nimport { SignupSuccessPageComponent } from './SignupSuccessPage/signup-success-page.component';\r\nimport { LoginComponent } from './login/login/login.component';\r\nimport { APP_BASE_HREF } from '@angular/common';\r\n\r\nexport const routes: Routes = [\r\n  { path: '', redirectTo: 'signin-form', pathMatch: 'full' },\r\n  { path: 'signin-form', component: SigninFormComponent },\r\n  { path: 'signup-form', component: SignupFormComponent },\r\n  { path: 'forgot-password-form', component: ForgotPasswordFormComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'signup-success-page', component: SignupSuccessPageComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\r\n  exports: [RouterModule],\r\n  providers: [{ provide: APP_BASE_HREF, useValue: '/' }],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-b22dabee8a5ac3eab0b2dd5d9b260c29112067c772a3241da682cb98111298539c2b6c90ec170742376e7b10a8e1277732df372a9c07706dda43ad3896ac170f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/index.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { AuthenticationService } from '../app/services/AuthenticationService';\r\nimport * as AuthliteTypes from '../app/types';\r\n//import { LoginWrapperComponent } from '../app/login/login-wrapper.component';\r\n//import { SignupFormComponent } from '../app/SignupForm/signup-form.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    //LoginWrapperComponent,\r\n    //SignupFormComponent\r\n  ],\r\n  providers: [\r\n    AuthenticationService\r\n  ],\r\n  exports: [\r\n    //LoginWrapperComponent,\r\n    //SignupFormComponent\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthenticationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [provideRouter(routes), importProvidersFrom(HttpClientModule)]\r\n}"
            },
            {
                "name": "DEFAULT_TRANSLATION_DICTIONARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/TranslationDictionaryType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TranslationDictionary",
                "defaultValue": "{\r\n    SIGNIN_FORM__LABEL_USERNAME: \"Username Or Email Address\",\r\n    SIGNIN_FORM__LABEL_PASSWORD: \"Password\",\r\n    SIGNIN_FORM__ACTION_SIGNIN: \"Sign in\",\r\n    SIGNIN_FORM__ACTION_CREATEACCOUNT: \"Create account\",\r\n    SIGNIN_FORM__ACTION_FORGOTPASSWORD: \"Forgot Password?\",\r\n    SIGNIN_FORM__MESSAGE_NO_ACCOUNT: \"Don't have an account?\",\r\n    SIGNIN_FORM__GREETING_TITLE: \"Hello again!!\",\r\n    SIGNIN_FORM__GREETING_SUBTITLE: \"Metus dui sapien phasellus arcu posuere eu adipiscing proin adipiscing mi luctus dignissim sem. hendrerit dapibus ut scelerisque tellus malesuada scelerisque vel est fermentum nullam sociosqu.\",\r\n\r\n    SIGNIN_ERROR__BAD_REQUEST: \"Bad request\",\r\n    SIGNIN_ERROR__BLANK_PASSWORD: \"Password is empty\",\r\n    SIGNIN_ERROR__BLANK_USERNAME: \"Username is empty\",\r\n    SIGNIN_ERROR__INVALID_USERNAME: \"Email is not valid\",\r\n    SIGNIN_ERROR__EMAIL_NOT_VERIFIED: \"Email verification pending\",\r\n    SIGNIN_ERROR__INCORRECT_PASSWORD: \"Password is incorrect\",\r\n    SIGNIN_ERROR__UNKNOWN_ERROR: \"Unknown error\",\r\n    SIGNIN_ERROR__USER_NOT_FOUND: \"Username does not exist\",\r\n\r\n    SIGNUP_FORM__LABEL_GIVENNAME: \"Given name\",\r\n    SIGNUP_FORM__LABEL_FAMILYNAME: \"Family name\",\r\n    SIGNUP_FORM__LABEL_EMAIL: \"Username Or Email Address\",\r\n    SIGNUP_FORM__LABEL_PASSWORD: \"Password\",\r\n    SIGNUP_FORM__LABEL_RETYPEPASSWORD: \"Retype Password\",\r\n    SIGNUP_FORM__ACTION_CREATEACCOUNT: \"Create account\",\r\n    SIGNUP_FORM__ACTION_SIGNIN: \"Sign in\",\r\n    SIGNUP_FORM__MESSAGE_EXISTING_ACCOUNT: \"Already have an account?\",\r\n    SIGNUP_FORM__GREETING_TITLE: \"Join Auth lite\",\r\n    SIGNUP_FORM__GREETING_SUBTITLE: \"Join the community of secure authentication and authorization providers.\",\r\n\r\n    SIGNUP_ERROR__BLANK_PASSWORD: \"Password is empty\",\r\n    SIGNUP_ERROR__BLANK_USERNAME: \"Username is empty\",\r\n    SIGNUP_ERROR__INVALID_USERNAME: \"Email is not valid\",\r\n    SIGNUP_ERROR__BLANK_FAMILYNAME: \"Family name is empty\",\r\n    SIGNUP_ERROR__BLANK_GIVENNAME: \"Given name is empty\",\r\n    SIGNUP_ERROR__BLANK_RETYPEPASSWORD: \"Retype password is empty\",\r\n    SIGNUP_ERROR__PASSWORDS_DO_NOT_MATCH: \"Passwords do not match\",\r\n\r\n    SIGNUP_ERROR__USER_ALREADY_EXISTS: \"Email is already taken\",\r\n    SIGNUP_ERROR__BAD_REQUEST: \"Bad request\",\r\n    SIGNUP_ERROR__UNKNOWN_ERROR: \"Unknown error\",\r\n\r\n    RESEND_VERIFY_LINK_FORM__LABEL_EMAIL: \"Email Address\",\r\n    RESEND_VERIFY_LINK_FORM__ACTION_SEND: \"Resend verification link\",\r\n    RESEND_VERIFY_LINK_FORM__ACTION_SIGNIN: \"Sign in now\",\r\n    RESEND_VERIFY_LINK_FORM__MESSAGE_ALREADY_VERIFIED: \"Already verified?\",\r\n    RESEND_VERIFY_LINK_FORM__GREETING_TITLE: \"Email confirmation link\",\r\n    RESEND_VERIFY_LINK_FORM__GREETING_SUBTITLE: \"Haven't received a confirmation link to confirm your user account? Enter your registered email address and we will send you another email confirmation link.\",\r\n\r\n    RESEND_VERIFY_LINK_ERROR__BLANK_USERNAME: \"Username is empty\",\r\n    RESEND_VERIFY_LINK_ERROR__USER_NOT_FOUND: \"User does not exist\",\r\n    RESEND_VERIFY_LINK_ERROR__INVALID_USERNAME: \"Email is not valid\",\r\n    RESEND_VERIFY_LINK_ERROR__BAD_REQUEST: \"Bad request\",\r\n    RESEND_VERIFY_LINK_ERROR__UNKNOWN_ERROR: \"Unknown error\",\r\n\r\n    FORGOT_PASSWORD_FORM__LABEL_EMAIL: \"Email Address\",\r\n    FORGOT_PASSWORD_FORM__ACTION_SEND: \"Send password reset email\",\r\n    FORGOT_PASSWORD_FORM__ACTION_SIGNIN: \"Sign in\",\r\n    FORGOT_PASSWORD_FORM__MESSAGE_REMEMBER_PASSWORD: \"Remember password?\",\r\n    FORGOT_PASSWORD_FORM__GREETING_TITLE: \"Password reset\",\r\n    FORGOT_PASSWORD_FORM__GREETING_SUBTITLE: \"Enter your registered email address and we will send you a password reset link.\",\r\n\r\n    FORGOT_PASSWORD_ERROR__BLANK_USERNAME: \"Username is empty\",\r\n    FORGOT_PASSWORD_ERROR__USER_NOT_FOUND: \"User does not exist\",\r\n    FORGOT_PASSWORD_ERROR__INVALID_USERNAME: \"Email is not valid\",\r\n    FORGOT_PASSWORD_ERROR__BAD_REQUEST: \"Bad request\",\r\n    FORGOT_PASSWORD_ERROR__UNKNOWN_ERROR: \"Unknown error\"\r\n}"
            },
            {
                "name": "Demo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login/login-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "getTranslation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/TranslationDictionaryType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n    name: TranslationName,\r\n    dictionary?: TranslationDictionary\r\n) => {\r\n    return (dictionary || DEFAULT_TRANSLATION_DICTIONARY)[name];\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ButtonComponent) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: HeaderComponent,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: PageComponent,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login/login-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LoginWrapperComponent>",
                "defaultValue": "(args: LoginWrapperComponent,) => ({\r\n  component: LoginWrapperComponent,\r\n  props: args,\r\n})"
            }
        ],
        "functions": [
            {
                "name": "htmlToText",
                "file": "src/app/utils/TextUtils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "str",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "str",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isEmailValid",
                "file": "src/app/utils/TextUtils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isEmptyAttributes",
                "file": "src/app/utils/TextUtils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "object",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "object",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isEmptyOrSpaces",
                "file": "src/app/utils/TextUtils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "str",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "str",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "match",
                "file": "src/app/utils/TextUtils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "words",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "words",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sort",
                "file": "src/app/utils/TextUtils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "property",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isReverseOrder",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "property",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isReverseOrder",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ForgotPasswordFormErrorMessages",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/ForgotPasswordFormErrorMessagesType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ForgotPasswordRequest",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/ResendVerifyLinkRequestType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ForgotPasswordResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/ForgotPasswordResponseType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ResendVerifyLinkFormErrorMessages",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/ResendVerifyLinkFormErrorMessagesType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ResendVerifyLinkRequest",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/ForgotPasswordRequestType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ResendVerifyLinkResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/ResendVerifyLinkResponseType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "SigninFormErrorMessages",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/SigninFormErrorMessagesType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "SigninRequest",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/SigninRequest.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "SigninResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/SigninResponse.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "SignupFormErrorMessages",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/SignupFormErrorMessagesType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "SignupRequest",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/SignupRequest.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "SignupResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/SignupResponse.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TranslationDictionary",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/TranslationDictionaryType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "PageView",
                "childs": [
                    {
                        "name": "signin",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signup",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "placeholder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forgotpassword",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resendverifyemail",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/types/PageViewType.ts"
            },
            {
                "name": "ThemeType",
                "childs": [
                    {
                        "name": "default",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    },
                    {
                        "name": "primary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "secondary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secondary"
                    },
                    {
                        "name": "success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    },
                    {
                        "name": "danger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "danger"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/types/ThemeType.ts"
            },
            {
                "name": "TranslationName",
                "childs": [
                    {
                        "name": "SIGNIN_FORM__LABEL_USERNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_FORM__LABEL_USERNAME"
                    },
                    {
                        "name": "SIGNIN_FORM__LABEL_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_FORM__LABEL_PASSWORD"
                    },
                    {
                        "name": "SIGNIN_FORM__ACTION_SIGNIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_FORM__ACTION_SIGNIN"
                    },
                    {
                        "name": "SIGNIN_FORM__ACTION_CREATEACCOUNT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_FORM__ACTION_CREATEACCOUNT"
                    },
                    {
                        "name": "SIGNIN_FORM__ACTION_FORGOTPASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_FORM__ACTION_FORGOTPASSWORD"
                    },
                    {
                        "name": "SIGNIN_FORM__MESSAGE_NO_ACCOUNT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_FORM__MESSAGE_NO_ACCOUNT"
                    },
                    {
                        "name": "SIGNIN_ERROR__BAD_REQUEST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_ERROR__BAD_REQUEST"
                    },
                    {
                        "name": "SIGNIN_ERROR__BLANK_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_ERROR__BLANK_PASSWORD"
                    },
                    {
                        "name": "SIGNIN_ERROR__BLANK_USERNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_ERROR__BLANK_USERNAME"
                    },
                    {
                        "name": "SIGNIN_ERROR__INVALID_USERNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_ERROR__INVALID_USERNAME"
                    },
                    {
                        "name": "SIGNIN_ERROR__EMAIL_NOT_VERIFIED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_ERROR__EMAIL_NOT_VERIFIED"
                    },
                    {
                        "name": "SIGNIN_ERROR__INCORRECT_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_ERROR__INCORRECT_PASSWORD"
                    },
                    {
                        "name": "SIGNIN_ERROR__UNKNOWN_ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_ERROR__UNKNOWN_ERROR"
                    },
                    {
                        "name": "SIGNIN_ERROR__USER_NOT_FOUND",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNIN_ERROR__USER_NOT_FOUND"
                    },
                    {
                        "name": "SIGNUP_FORM__LABEL_GIVENNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_FORM__LABEL_GIVENNAME"
                    },
                    {
                        "name": "SIGNUP_FORM__LABEL_FAMILYNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_FORM__LABEL_FAMILYNAME"
                    },
                    {
                        "name": "SIGNUP_FORM__LABEL_EMAIL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_FORM__LABEL_EMAIL"
                    },
                    {
                        "name": "SIGNUP_FORM__LABEL_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_FORM__LABEL_PASSWORD"
                    },
                    {
                        "name": "SIGNUP_FORM__LABEL_RETYPEPASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_FORM__LABEL_RETYPEPASSWORD"
                    },
                    {
                        "name": "SIGNUP_FORM__ACTION_CREATEACCOUNT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_FORM__ACTION_CREATEACCOUNT"
                    },
                    {
                        "name": "SIGNUP_FORM__ACTION_SIGNIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_FORM__ACTION_SIGNIN"
                    },
                    {
                        "name": "SIGNUP_FORM__MESSAGE_EXISTING_ACCOUNT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_FORM__MESSAGE_EXISTING_ACCOUNT"
                    },
                    {
                        "name": "SIGNUP_ERROR__BLANK_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_ERROR__BLANK_PASSWORD"
                    },
                    {
                        "name": "SIGNUP_ERROR__BLANK_USERNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_ERROR__BLANK_USERNAME"
                    },
                    {
                        "name": "SIGNUP_ERROR__INVALID_USERNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_ERROR__INVALID_USERNAME"
                    },
                    {
                        "name": "SIGNUP_ERROR__BLANK_FAMILYNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_ERROR__BLANK_FAMILYNAME"
                    },
                    {
                        "name": "SIGNUP_ERROR__BLANK_GIVENNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_ERROR__BLANK_GIVENNAME"
                    },
                    {
                        "name": "SIGNUP_ERROR__BLANK_RETYPEPASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_ERROR__BLANK_RETYPEPASSWORD"
                    },
                    {
                        "name": "SIGNUP_ERROR__PASSWORDS_DO_NOT_MATCH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_ERROR__PASSWORDS_DO_NOT_MATCH"
                    },
                    {
                        "name": "SIGNUP_ERROR__USER_ALREADY_EXISTS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_ERROR__USER_ALREADY_EXISTS"
                    },
                    {
                        "name": "SIGNUP_ERROR__BAD_REQUEST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_ERROR__BAD_REQUEST"
                    },
                    {
                        "name": "SIGNUP_ERROR__UNKNOWN_ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SIGNUP_ERROR__UNKNOWN_ERROR"
                    },
                    {
                        "name": "RESEND_VERIFY_LINK_FORM__LABEL_EMAIL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RESEND_VERIFY_LINK_FORM__LABEL_EMAIL"
                    },
                    {
                        "name": "RESEND_VERIFY_LINK_FORM__MESSAGE_ALREADY_VERIFIED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RESEND_VERIFY_LINK_FORM__MESSAGE_ALREADY_VERIFIED"
                    },
                    {
                        "name": "RESEND_VERIFY_LINK_FORM__ACTION_SEND",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RESEND_VERIFY_LINK_FORM__ACTION_SEND"
                    },
                    {
                        "name": "RESEND_VERIFY_LINK_FORM__ACTION_SIGNIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RESEND_VERIFY_LINK_FORM__ACTION_SIGNIN"
                    },
                    {
                        "name": "RESEND_VERIFY_LINK_ERROR__BLANK_USERNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RESEND_VERIFY_LINK_ERROR__BLANK_USERNAME"
                    },
                    {
                        "name": "RESEND_VERIFY_LINK_ERROR__USER_NOT_FOUND",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RESEND_VERIFY_LINK_ERROR__USER_NOT_FOUND"
                    },
                    {
                        "name": "RESEND_VERIFY_LINK_ERROR__INVALID_USERNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RESEND_VERIFY_LINK_ERROR__INVALID_USERNAME"
                    },
                    {
                        "name": "RESEND_VERIFY_LINK_ERROR__BAD_REQUEST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RESEND_VERIFY_LINK_ERROR__BAD_REQUEST"
                    },
                    {
                        "name": "RESEND_VERIFY_LINK_ERROR__UNKNOWN_ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RESEND_VERIFY_LINK_ERROR__UNKNOWN_ERROR"
                    },
                    {
                        "name": "FORGOT_PASSWORD_FORM__LABEL_EMAIL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORGOT_PASSWORD_FORM__LABEL_EMAIL"
                    },
                    {
                        "name": "FORGOT_PASSWORD_FORM__ACTION_SEND",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORGOT_PASSWORD_FORM__ACTION_SEND"
                    },
                    {
                        "name": "FORGOT_PASSWORD_FORM__ACTION_SIGNIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORGOT_PASSWORD_FORM__ACTION_SIGNIN"
                    },
                    {
                        "name": "FORGOT_PASSWORD_FORM__MESSAGE_REMEMBER_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORGOT_PASSWORD_FORM__MESSAGE_REMEMBER_PASSWORD"
                    },
                    {
                        "name": "FORGOT_PASSWORD_ERROR__BLANK_USERNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORGOT_PASSWORD_ERROR__BLANK_USERNAME"
                    },
                    {
                        "name": "FORGOT_PASSWORD_ERROR__USER_NOT_FOUND",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORGOT_PASSWORD_ERROR__USER_NOT_FOUND"
                    },
                    {
                        "name": "FORGOT_PASSWORD_ERROR__INVALID_USERNAME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORGOT_PASSWORD_ERROR__INVALID_USERNAME"
                    },
                    {
                        "name": "FORGOT_PASSWORD_ERROR__BAD_REQUEST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORGOT_PASSWORD_ERROR__BAD_REQUEST"
                    },
                    {
                        "name": "FORGOT_PASSWORD_ERROR__UNKNOWN_ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORGOT_PASSWORD_ERROR__UNKNOWN_ERROR"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/types/TranslationDictionaryType.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [provideRouter(routes), importProvidersFrom(HttpClientModule)]\r\n}"
                }
            ],
            "src/app/types/TranslationDictionaryType.ts": [
                {
                    "name": "DEFAULT_TRANSLATION_DICTIONARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/TranslationDictionaryType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslationDictionary",
                    "defaultValue": "{\r\n    SIGNIN_FORM__LABEL_USERNAME: \"Username Or Email Address\",\r\n    SIGNIN_FORM__LABEL_PASSWORD: \"Password\",\r\n    SIGNIN_FORM__ACTION_SIGNIN: \"Sign in\",\r\n    SIGNIN_FORM__ACTION_CREATEACCOUNT: \"Create account\",\r\n    SIGNIN_FORM__ACTION_FORGOTPASSWORD: \"Forgot Password?\",\r\n    SIGNIN_FORM__MESSAGE_NO_ACCOUNT: \"Don't have an account?\",\r\n    SIGNIN_FORM__GREETING_TITLE: \"Hello again!!\",\r\n    SIGNIN_FORM__GREETING_SUBTITLE: \"Metus dui sapien phasellus arcu posuere eu adipiscing proin adipiscing mi luctus dignissim sem. hendrerit dapibus ut scelerisque tellus malesuada scelerisque vel est fermentum nullam sociosqu.\",\r\n\r\n    SIGNIN_ERROR__BAD_REQUEST: \"Bad request\",\r\n    SIGNIN_ERROR__BLANK_PASSWORD: \"Password is empty\",\r\n    SIGNIN_ERROR__BLANK_USERNAME: \"Username is empty\",\r\n    SIGNIN_ERROR__INVALID_USERNAME: \"Email is not valid\",\r\n    SIGNIN_ERROR__EMAIL_NOT_VERIFIED: \"Email verification pending\",\r\n    SIGNIN_ERROR__INCORRECT_PASSWORD: \"Password is incorrect\",\r\n    SIGNIN_ERROR__UNKNOWN_ERROR: \"Unknown error\",\r\n    SIGNIN_ERROR__USER_NOT_FOUND: \"Username does not exist\",\r\n\r\n    SIGNUP_FORM__LABEL_GIVENNAME: \"Given name\",\r\n    SIGNUP_FORM__LABEL_FAMILYNAME: \"Family name\",\r\n    SIGNUP_FORM__LABEL_EMAIL: \"Username Or Email Address\",\r\n    SIGNUP_FORM__LABEL_PASSWORD: \"Password\",\r\n    SIGNUP_FORM__LABEL_RETYPEPASSWORD: \"Retype Password\",\r\n    SIGNUP_FORM__ACTION_CREATEACCOUNT: \"Create account\",\r\n    SIGNUP_FORM__ACTION_SIGNIN: \"Sign in\",\r\n    SIGNUP_FORM__MESSAGE_EXISTING_ACCOUNT: \"Already have an account?\",\r\n    SIGNUP_FORM__GREETING_TITLE: \"Join Auth lite\",\r\n    SIGNUP_FORM__GREETING_SUBTITLE: \"Join the community of secure authentication and authorization providers.\",\r\n\r\n    SIGNUP_ERROR__BLANK_PASSWORD: \"Password is empty\",\r\n    SIGNUP_ERROR__BLANK_USERNAME: \"Username is empty\",\r\n    SIGNUP_ERROR__INVALID_USERNAME: \"Email is not valid\",\r\n    SIGNUP_ERROR__BLANK_FAMILYNAME: \"Family name is empty\",\r\n    SIGNUP_ERROR__BLANK_GIVENNAME: \"Given name is empty\",\r\n    SIGNUP_ERROR__BLANK_RETYPEPASSWORD: \"Retype password is empty\",\r\n    SIGNUP_ERROR__PASSWORDS_DO_NOT_MATCH: \"Passwords do not match\",\r\n\r\n    SIGNUP_ERROR__USER_ALREADY_EXISTS: \"Email is already taken\",\r\n    SIGNUP_ERROR__BAD_REQUEST: \"Bad request\",\r\n    SIGNUP_ERROR__UNKNOWN_ERROR: \"Unknown error\",\r\n\r\n    RESEND_VERIFY_LINK_FORM__LABEL_EMAIL: \"Email Address\",\r\n    RESEND_VERIFY_LINK_FORM__ACTION_SEND: \"Resend verification link\",\r\n    RESEND_VERIFY_LINK_FORM__ACTION_SIGNIN: \"Sign in now\",\r\n    RESEND_VERIFY_LINK_FORM__MESSAGE_ALREADY_VERIFIED: \"Already verified?\",\r\n    RESEND_VERIFY_LINK_FORM__GREETING_TITLE: \"Email confirmation link\",\r\n    RESEND_VERIFY_LINK_FORM__GREETING_SUBTITLE: \"Haven't received a confirmation link to confirm your user account? Enter your registered email address and we will send you another email confirmation link.\",\r\n\r\n    RESEND_VERIFY_LINK_ERROR__BLANK_USERNAME: \"Username is empty\",\r\n    RESEND_VERIFY_LINK_ERROR__USER_NOT_FOUND: \"User does not exist\",\r\n    RESEND_VERIFY_LINK_ERROR__INVALID_USERNAME: \"Email is not valid\",\r\n    RESEND_VERIFY_LINK_ERROR__BAD_REQUEST: \"Bad request\",\r\n    RESEND_VERIFY_LINK_ERROR__UNKNOWN_ERROR: \"Unknown error\",\r\n\r\n    FORGOT_PASSWORD_FORM__LABEL_EMAIL: \"Email Address\",\r\n    FORGOT_PASSWORD_FORM__ACTION_SEND: \"Send password reset email\",\r\n    FORGOT_PASSWORD_FORM__ACTION_SIGNIN: \"Sign in\",\r\n    FORGOT_PASSWORD_FORM__MESSAGE_REMEMBER_PASSWORD: \"Remember password?\",\r\n    FORGOT_PASSWORD_FORM__GREETING_TITLE: \"Password reset\",\r\n    FORGOT_PASSWORD_FORM__GREETING_SUBTITLE: \"Enter your registered email address and we will send you a password reset link.\",\r\n\r\n    FORGOT_PASSWORD_ERROR__BLANK_USERNAME: \"Username is empty\",\r\n    FORGOT_PASSWORD_ERROR__USER_NOT_FOUND: \"User does not exist\",\r\n    FORGOT_PASSWORD_ERROR__INVALID_USERNAME: \"Email is not valid\",\r\n    FORGOT_PASSWORD_ERROR__BAD_REQUEST: \"Bad request\",\r\n    FORGOT_PASSWORD_ERROR__UNKNOWN_ERROR: \"Unknown error\"\r\n}"
                },
                {
                    "name": "getTranslation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/TranslationDictionaryType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n    name: TranslationName,\r\n    dictionary?: TranslationDictionary\r\n) => {\r\n    return (dictionary || DEFAULT_TRANSLATION_DICTIONARY)[name];\r\n}"
                }
            ],
            "src/app/login/login-wrapper.stories.ts": [
                {
                    "name": "Demo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login/login-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login/login-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LoginWrapperComponent>",
                    "defaultValue": "(args: LoginWrapperComponent,) => ({\r\n  component: LoginWrapperComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ButtonComponent) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: HeaderComponent,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: PageComponent,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/utils/TextUtils.ts": [
                {
                    "name": "htmlToText",
                    "file": "src/app/utils/TextUtils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "str",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEmailValid",
                    "file": "src/app/utils/TextUtils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEmptyAttributes",
                    "file": "src/app/utils/TextUtils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "object",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEmptyOrSpaces",
                    "file": "src/app/utils/TextUtils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "str",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "match",
                    "file": "src/app/utils/TextUtils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "words",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "words",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "file": "src/app/utils/TextUtils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "property",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isReverseOrder",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "property",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isReverseOrder",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/types/PageViewType.ts": [
                {
                    "name": "PageView",
                    "childs": [
                        {
                            "name": "signin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "signup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "placeholder",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "forgotpassword",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resendverifyemail",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/types/PageViewType.ts"
                }
            ],
            "src/app/types/ThemeType.ts": [
                {
                    "name": "ThemeType",
                    "childs": [
                        {
                            "name": "default",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        },
                        {
                            "name": "primary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "secondary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secondary"
                        },
                        {
                            "name": "success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        },
                        {
                            "name": "danger",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "danger"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/types/ThemeType.ts"
                }
            ],
            "src/app/types/TranslationDictionaryType.ts": [
                {
                    "name": "TranslationName",
                    "childs": [
                        {
                            "name": "SIGNIN_FORM__LABEL_USERNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_FORM__LABEL_USERNAME"
                        },
                        {
                            "name": "SIGNIN_FORM__LABEL_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_FORM__LABEL_PASSWORD"
                        },
                        {
                            "name": "SIGNIN_FORM__ACTION_SIGNIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_FORM__ACTION_SIGNIN"
                        },
                        {
                            "name": "SIGNIN_FORM__ACTION_CREATEACCOUNT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_FORM__ACTION_CREATEACCOUNT"
                        },
                        {
                            "name": "SIGNIN_FORM__ACTION_FORGOTPASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_FORM__ACTION_FORGOTPASSWORD"
                        },
                        {
                            "name": "SIGNIN_FORM__MESSAGE_NO_ACCOUNT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_FORM__MESSAGE_NO_ACCOUNT"
                        },
                        {
                            "name": "SIGNIN_ERROR__BAD_REQUEST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_ERROR__BAD_REQUEST"
                        },
                        {
                            "name": "SIGNIN_ERROR__BLANK_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_ERROR__BLANK_PASSWORD"
                        },
                        {
                            "name": "SIGNIN_ERROR__BLANK_USERNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_ERROR__BLANK_USERNAME"
                        },
                        {
                            "name": "SIGNIN_ERROR__INVALID_USERNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_ERROR__INVALID_USERNAME"
                        },
                        {
                            "name": "SIGNIN_ERROR__EMAIL_NOT_VERIFIED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_ERROR__EMAIL_NOT_VERIFIED"
                        },
                        {
                            "name": "SIGNIN_ERROR__INCORRECT_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_ERROR__INCORRECT_PASSWORD"
                        },
                        {
                            "name": "SIGNIN_ERROR__UNKNOWN_ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_ERROR__UNKNOWN_ERROR"
                        },
                        {
                            "name": "SIGNIN_ERROR__USER_NOT_FOUND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNIN_ERROR__USER_NOT_FOUND"
                        },
                        {
                            "name": "SIGNUP_FORM__LABEL_GIVENNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_FORM__LABEL_GIVENNAME"
                        },
                        {
                            "name": "SIGNUP_FORM__LABEL_FAMILYNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_FORM__LABEL_FAMILYNAME"
                        },
                        {
                            "name": "SIGNUP_FORM__LABEL_EMAIL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_FORM__LABEL_EMAIL"
                        },
                        {
                            "name": "SIGNUP_FORM__LABEL_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_FORM__LABEL_PASSWORD"
                        },
                        {
                            "name": "SIGNUP_FORM__LABEL_RETYPEPASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_FORM__LABEL_RETYPEPASSWORD"
                        },
                        {
                            "name": "SIGNUP_FORM__ACTION_CREATEACCOUNT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_FORM__ACTION_CREATEACCOUNT"
                        },
                        {
                            "name": "SIGNUP_FORM__ACTION_SIGNIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_FORM__ACTION_SIGNIN"
                        },
                        {
                            "name": "SIGNUP_FORM__MESSAGE_EXISTING_ACCOUNT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_FORM__MESSAGE_EXISTING_ACCOUNT"
                        },
                        {
                            "name": "SIGNUP_ERROR__BLANK_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_ERROR__BLANK_PASSWORD"
                        },
                        {
                            "name": "SIGNUP_ERROR__BLANK_USERNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_ERROR__BLANK_USERNAME"
                        },
                        {
                            "name": "SIGNUP_ERROR__INVALID_USERNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_ERROR__INVALID_USERNAME"
                        },
                        {
                            "name": "SIGNUP_ERROR__BLANK_FAMILYNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_ERROR__BLANK_FAMILYNAME"
                        },
                        {
                            "name": "SIGNUP_ERROR__BLANK_GIVENNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_ERROR__BLANK_GIVENNAME"
                        },
                        {
                            "name": "SIGNUP_ERROR__BLANK_RETYPEPASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_ERROR__BLANK_RETYPEPASSWORD"
                        },
                        {
                            "name": "SIGNUP_ERROR__PASSWORDS_DO_NOT_MATCH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_ERROR__PASSWORDS_DO_NOT_MATCH"
                        },
                        {
                            "name": "SIGNUP_ERROR__USER_ALREADY_EXISTS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_ERROR__USER_ALREADY_EXISTS"
                        },
                        {
                            "name": "SIGNUP_ERROR__BAD_REQUEST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_ERROR__BAD_REQUEST"
                        },
                        {
                            "name": "SIGNUP_ERROR__UNKNOWN_ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SIGNUP_ERROR__UNKNOWN_ERROR"
                        },
                        {
                            "name": "RESEND_VERIFY_LINK_FORM__LABEL_EMAIL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RESEND_VERIFY_LINK_FORM__LABEL_EMAIL"
                        },
                        {
                            "name": "RESEND_VERIFY_LINK_FORM__MESSAGE_ALREADY_VERIFIED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RESEND_VERIFY_LINK_FORM__MESSAGE_ALREADY_VERIFIED"
                        },
                        {
                            "name": "RESEND_VERIFY_LINK_FORM__ACTION_SEND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RESEND_VERIFY_LINK_FORM__ACTION_SEND"
                        },
                        {
                            "name": "RESEND_VERIFY_LINK_FORM__ACTION_SIGNIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RESEND_VERIFY_LINK_FORM__ACTION_SIGNIN"
                        },
                        {
                            "name": "RESEND_VERIFY_LINK_ERROR__BLANK_USERNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RESEND_VERIFY_LINK_ERROR__BLANK_USERNAME"
                        },
                        {
                            "name": "RESEND_VERIFY_LINK_ERROR__USER_NOT_FOUND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RESEND_VERIFY_LINK_ERROR__USER_NOT_FOUND"
                        },
                        {
                            "name": "RESEND_VERIFY_LINK_ERROR__INVALID_USERNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RESEND_VERIFY_LINK_ERROR__INVALID_USERNAME"
                        },
                        {
                            "name": "RESEND_VERIFY_LINK_ERROR__BAD_REQUEST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RESEND_VERIFY_LINK_ERROR__BAD_REQUEST"
                        },
                        {
                            "name": "RESEND_VERIFY_LINK_ERROR__UNKNOWN_ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RESEND_VERIFY_LINK_ERROR__UNKNOWN_ERROR"
                        },
                        {
                            "name": "FORGOT_PASSWORD_FORM__LABEL_EMAIL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORGOT_PASSWORD_FORM__LABEL_EMAIL"
                        },
                        {
                            "name": "FORGOT_PASSWORD_FORM__ACTION_SEND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORGOT_PASSWORD_FORM__ACTION_SEND"
                        },
                        {
                            "name": "FORGOT_PASSWORD_FORM__ACTION_SIGNIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORGOT_PASSWORD_FORM__ACTION_SIGNIN"
                        },
                        {
                            "name": "FORGOT_PASSWORD_FORM__MESSAGE_REMEMBER_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORGOT_PASSWORD_FORM__MESSAGE_REMEMBER_PASSWORD"
                        },
                        {
                            "name": "FORGOT_PASSWORD_ERROR__BLANK_USERNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORGOT_PASSWORD_ERROR__BLANK_USERNAME"
                        },
                        {
                            "name": "FORGOT_PASSWORD_ERROR__USER_NOT_FOUND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORGOT_PASSWORD_ERROR__USER_NOT_FOUND"
                        },
                        {
                            "name": "FORGOT_PASSWORD_ERROR__INVALID_USERNAME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORGOT_PASSWORD_ERROR__INVALID_USERNAME"
                        },
                        {
                            "name": "FORGOT_PASSWORD_ERROR__BAD_REQUEST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORGOT_PASSWORD_ERROR__BAD_REQUEST"
                        },
                        {
                            "name": "FORGOT_PASSWORD_ERROR__UNKNOWN_ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORGOT_PASSWORD_ERROR__UNKNOWN_ERROR"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/types/TranslationDictionaryType.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/types/ForgotPasswordFormErrorMessagesType.ts": [
                {
                    "name": "ForgotPasswordFormErrorMessages",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/ForgotPasswordFormErrorMessagesType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/ResendVerifyLinkRequestType.ts": [
                {
                    "name": "ForgotPasswordRequest",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/ResendVerifyLinkRequestType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/ForgotPasswordResponseType.ts": [
                {
                    "name": "ForgotPasswordResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/ForgotPasswordResponseType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/ResendVerifyLinkFormErrorMessagesType.ts": [
                {
                    "name": "ResendVerifyLinkFormErrorMessages",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/ResendVerifyLinkFormErrorMessagesType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/ForgotPasswordRequestType.ts": [
                {
                    "name": "ResendVerifyLinkRequest",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/ForgotPasswordRequestType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/ResendVerifyLinkResponseType.ts": [
                {
                    "name": "ResendVerifyLinkResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/ResendVerifyLinkResponseType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/SigninFormErrorMessagesType.ts": [
                {
                    "name": "SigninFormErrorMessages",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/SigninFormErrorMessagesType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/SigninRequest.ts": [
                {
                    "name": "SigninRequest",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/SigninRequest.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/SigninResponse.ts": [
                {
                    "name": "SigninResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/SigninResponse.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/SignupFormErrorMessagesType.ts": [
                {
                    "name": "SignupFormErrorMessages",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/SignupFormErrorMessagesType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/SignupRequest.ts": [
                {
                    "name": "SignupRequest",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/SignupRequest.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/SignupResponse.ts": [
                {
                    "name": "SignupResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/SignupResponse.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/types/TranslationDictionaryType.ts": [
                {
                    "name": "TranslationDictionary",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/TranslationDictionaryType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ForgotPasswordForm/forgot-password-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/Header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/InfoPage/InfoPageDescription/info-page-description.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoPageDescriptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/InfoPage/InfoPageFootnote/info-page.footnote.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoPageFootnoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/InfoPage/info-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/Logo/logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/Placeholder/placeholder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlaceholderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ResendVerifyLinkForm/resend-verify-link-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResendVerifyLinkFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/SignupForm/signup-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/SignupSuccessPage/signup-success-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupSuccessPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/Tagline/tagline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaglineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/DesignOne/design-one.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DesignOneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/login/MainForm/main-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login-wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Demo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/services/AuthenticationService.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/AuthenticationService.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ForgotPasswordRequest",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/AuthenticationService.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ForgotPasswordResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/AuthenticationService.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResendVerifyLinkRequest",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/AuthenticationService.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResendVerifyLinkResponse",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/AuthenticationService.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SigninRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/AuthenticationService.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SigninResponse",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/AuthenticationService.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SignupRequest",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/FormElementMessage/form-element-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormElementMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/signinForm/signin-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SigninFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/types/TranslationDictionaryType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_TRANSLATION_DICTIONARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/TranslationDictionaryType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTranslation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/TextUtils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "htmlToText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/TextUtils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isEmailValid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/TextUtils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isEmptyAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/TextUtils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isEmptyOrSpaces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/TextUtils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "match",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/TextUtils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}